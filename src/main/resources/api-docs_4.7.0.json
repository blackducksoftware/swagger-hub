{
  "swagger": "2.0",
  "info": {
    "description": "Documentation for Hub API",
    "version": "4.7.0",
    "title": "Hub API",
    "contact": {},
    "license": {}
  },
  "host": "int-hub02.dc1.lan:443",
  "basePath": "/",
  "tags": [
    {
      "name": "hierarchical-version-bom-rest-server",
      "description": "Hierarchical Version Bom Rest Server"
    },
    {
      "name": "report-rest-server",
      "description": "Report Rest Server"
    },
    {
      "name": "policy-rule-rest-server",
      "description": "Policy Rule Rest Server"
    },
    {
      "name": "meta-rest-server",
      "description": "Meta Rest Server"
    },
    {
      "name": "aggregate-bom-internal-rest-server",
      "description": "Aggregate Bom Internal Rest Server"
    },
    {
      "name": "component-rest-server",
      "description": "Component Rest Server"
    },
    {
      "name": "external-extension-rest-server",
      "description": "External Extension Rest Server"
    },
    {
      "name": "role-rest-server",
      "description": "Role Rest Server"
    },
    {
      "name": "vuln-db-report-db-copy-rest-server",
      "description": "Vuln Db Report Db Copy Rest Server"
    },
    {
      "name": "dashboard-rest-server",
      "description": "Dashboard Rest Server"
    },
    {
      "name": "component-version-rest-server",
      "description": "Component Version Rest Server"
    },
    {
      "name": "notification-rest-server",
      "description": "Notification Rest Server"
    },
    {
      "name": "project-version-rest-server",
      "description": "Project Version Rest Server"
    },
    {
      "name": "matched-file-rest-server",
      "description": "Matched File Rest Server"
    },
    {
      "name": "policy-rule-filter-rest-server",
      "description": "Policy Rule Filter Rest Server"
    },
    {
      "name": "version-risk-profile",
      "description": "Version Risk Profile"
    },
    {
      "name": "user-role-internal-rest-server",
      "description": "User Role Internal Rest Server"
    },
    {
      "name": "user-group-rest-server",
      "description": "User Group Rest Server"
    },
    {
      "name": "license-filter-rest-server",
      "description": "License Filter Rest Server"
    },
    {
      "name": "user-filters-rest-server",
      "description": "User Filters Rest Server"
    },
    {
      "name": "code-location-rest-server",
      "description": "Code Location Rest Server"
    },
    {
      "name": "bom-component-comment-rest-server",
      "description": "Bom Component Comment Rest Server"
    },
    {
      "name": "component-version-risk-profile-rest-server",
      "description": "Component Version Risk Profile Rest Server"
    },
    {
      "name": "notification-subscription-rest-server",
      "description": "Notification Subscription Rest Server"
    },
    {
      "name": "url-directory-rest-server",
      "description": "Url Directory Rest Server"
    },
    {
      "name": "aggregate-bom-rest-server",
      "description": "Aggregate Bom Rest Server"
    },
    {
      "name": "search-rest-server",
      "description": "Search Rest Server"
    },
    {
      "name": "user-notification-filter-rest-server",
      "description": "User Notification Filter Rest Server"
    },
    {
      "name": "vulnerable-component-rest-server",
      "description": "Vulnerable Component Rest Server"
    },
    {
      "name": "health-check-rest-server",
      "description": "Health Check Rest Server"
    },
    {
      "name": "risk-profile-rest-server",
      "description": "Risk Profile Rest Server"
    },
    {
      "name": "user-rest-server",
      "description": "User Rest Server"
    },
    {
      "name": "tag-rest-server",
      "description": "Tag Rest Server"
    },
    {
      "name": "bom-component-issue-rest-server",
      "description": "Bom Component Issue Rest Server"
    },
    {
      "name": "end-user-license-agreement-rest-server",
      "description": "End User License Agreement Rest Server"
    },
    {
      "name": "user-internal-rest-server",
      "description": "User Internal Rest Server"
    },
    {
      "name": "license-rest-server",
      "description": "License Rest Server"
    },
    {
      "name": "project-version-bom-comparison-rest-server",
      "description": "Project Version Bom Comparison Rest Server"
    },
    {
      "name": "project-assignment-internal-rest-server",
      "description": "Project Assignment Internal Rest Server"
    },
    {
      "name": "vulnerability-rest-server",
      "description": "Vulnerability Rest Server"
    },
    {
      "name": "user-group-internal-rest-server",
      "description": "User Group Internal Rest Server"
    },
    {
      "name": "project-assignment-rest-server",
      "description": "Project Assignment Rest Server"
    },
    {
      "name": "version-bom-policy-rest-server",
      "description": "Version Bom Policy Rest Server"
    },
    {
      "name": "project-rest-server",
      "description": "Project Rest Server"
    },
    {
      "name": "user-role-rest-server",
      "description": "User Role Rest Server"
    }
  ],
  "paths": {
    "/api/": {
      "get": {
        "tags": [
          "url-directory-rest-server"
        ],
        "summary": "getInternalUrlDirectory",
        "operationId": "getInternalUrlDirectoryUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UrlDirectoryInternalView"
            }
          }
        }
      }
    },
    "/api/codelocations": {
      "get": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "findCodeLocations",
        "operationId": "findCodeLocationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.scan-4+json",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.codelocation-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          },
          {
            "name": "codeLocationType",
            "in": "query",
            "description": "codeLocationType",
            "required": false,
            "type": "string",
            "enum": [
              "SCM",
              "FS",
              "BOM_IMPORT"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : type, name, url",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«CodeLocationView»"
            }
          }
        }
      }
    },
    "/api/codelocations/{codeLocationId}": {
      "get": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "findCodeLocation",
        "operationId": "findCodeLocationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.scan-4+json",
          "application/json",
          "application/vnd.blackducksoftware.codelocation-1+json"
        ],
        "parameters": [
          {
            "name": "codeLocationId",
            "in": "path",
            "description": "codeLocationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CodeLocationView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "updateCodeLocation",
        "operationId": "updateCodeLocationUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.scan-4+json",
          "application/json",
          "application/vnd.blackducksoftware.codelocation-1+json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.scan-4+json",
          "application/json",
          "application/vnd.blackducksoftware.codelocation-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "codeLocationRequest",
            "description": "codeLocationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CodeLocationView"
            }
          },
          {
            "name": "codeLocationId",
            "in": "path",
            "description": "codeLocationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CodeLocationView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "deleteCodeLocation",
        "operationId": "deleteCodeLocationUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "codeLocationId",
            "in": "path",
            "description": "codeLocationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/components": {
      "get": {
        "tags": [
          "component-rest-server"
        ],
        "summary": "getComponents",
        "operationId": "getComponentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": true,
            "type": "string",
            "default": "local:true",
            "enum": [
              "local:true"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«ComponentDetailsView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "component-rest-server"
        ],
        "summary": "createCustomComponent",
        "operationId": "createCustomComponentUsingPOST",
        "consumes": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "componentRequest",
            "description": "componentRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomComponentRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/components/{componentId}": {
      "get": {
        "tags": [
          "component-rest-server"
        ],
        "summary": "findComponent",
        "operationId": "findComponentUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.component-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "component-rest-server"
        ],
        "summary": "updateCustomComponent",
        "operationId": "updateCustomComponentUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.component-1+json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.component-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "customComponentRequest",
            "description": "customComponentRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ComponentView"
            }
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "component-rest-server"
        ],
        "summary": "deleteCustomComponent",
        "operationId": "deleteCustomComponentUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/components/{componentId}/versions": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "findVersionsByProjectId",
        "operationId": "findVersionsByProjectIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.component-version-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : versionName, releasedOn",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«ComponentVersionView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "createCustomComponentVersion",
        "operationId": "createCustomComponentVersionUsingPOST",
        "consumes": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "componentVersionRequest",
            "description": "componentVersionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomComponentVersionRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "findVersion",
        "operationId": "findVersionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.component-version-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentVersionView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "updateCustomComponentVersion",
        "operationId": "updateCustomComponentVersionUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.component-1+json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.component-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "customComponentVersionRequest",
            "description": "customComponentVersionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ComponentVersionView"
            }
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentVersionView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "deleteCustomComponentVersion",
        "operationId": "deleteCustomComponentVersionUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/crypto-algorithms": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "getVersionCryptoAlgorithms",
        "operationId": "getVersionCryptoAlgorithmsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«CryptoAlgorithmView»"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/licenses/{licenseId}": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "findLicenseForComponentVersion",
        "operationId": "findLicenseForComponentVersionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.license-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseView"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/licenses/{licenseId}/text": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "getLicenseText",
        "operationId": "getLicenseTextUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.license-text-original-1+json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/origin": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "findOrigins",
        "operationId": "findOriginsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.version-origin-1",
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : versionName, releasedOn",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«OriginView»"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/origin/{originId}": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "findOrigin",
        "operationId": "findOriginUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.version-origin-1+json",
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "originId",
            "in": "path",
            "description": "originId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OriginView"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/origin/{originId}/direct-dependencies": {
      "get": {
        "tags": [
          "component-rest-server"
        ],
        "summary": "directDependencies",
        "operationId": "directDependenciesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "originId",
            "in": "path",
            "description": "originId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«OriginDependencyView»"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/origin/{originId}/vulnerabilities": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds vulnerabilities by component version and origin",
        "operationId": "pageChannelVulnerabilitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.vulnerability-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to retrieve",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of records from the beginning of the results to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "ID of the component to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "ID of the version to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "originId",
            "in": "path",
            "description": "ID of the origin to limit retrieved vulnerabilities to",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search term(s) to filter results by",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«VulnerabilityV1View»"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/references": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findProjectVersionByComponentVersionId",
        "operationId": "findProjectVersionByComponentVersionIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.component-version-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : projectName, versionName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«ComponentVersionReferenceView»"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/remediating": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "getRemediationOptions",
        "operationId": "getRemediationOptionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.component-version-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemediationOptionsView"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/risk-profile": {
      "get": {
        "tags": [
          "component-version-risk-profile-rest-server"
        ],
        "summary": "findComponentVersionRiskProfile",
        "operationId": "findComponentVersionRiskProfileUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.risk-profile-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentVersionRiskView"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/vulnerabilities": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds vulnerabilities by component version",
        "operationId": "pageVersionVulnerabilitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.vulnerability-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to retrieve",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of records from the beginning of the results to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "ID of the component to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "ID of the version to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search term(s) to filter results by",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«VulnerabilityV1View»"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/vulnerabilities": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds vulnerabilities by component",
        "operationId": "pageComponentV2VulnerabilitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.vulnerability-4+json",
          "application/json",
          "application/vnd.blackducksoftware.vulnerability-2+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to retrieve",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of records from the beginning of the results to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "ID of the component to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search term(s) to filter results by",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«VulnerabilityV2View»"
            }
          }
        }
      }
    },
    "/api/current-user": {
      "get": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "getCurrentUser",
        "operationId": "getCurrentUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          }
        }
      }
    },
    "/api/current-version": {
      "get": {
        "tags": [
          "meta-rest-server"
        ],
        "summary": "findCurrentHubVersion",
        "operationId": "findCurrentHubVersionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CurrentVersionView"
            }
          }
        }
      }
    },
    "/api/cwes/{cweId}": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds a specific CWE (common weakness enumeration) record",
        "operationId": "findCweUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.vulnerability-4+json",
          "application/json",
          "application/vnd.blackducksoftware.vulnerability-2+json"
        ],
        "parameters": [
          {
            "name": "cweId",
            "in": "path",
            "description": "cweId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CweView"
            }
          }
        }
      }
    },
    "/api/dashboard-summary": {
      "get": {
        "tags": [
          "dashboard-rest-server"
        ],
        "summary": "Get the aggregated links needed to construct the summary dashboard",
        "operationId": "getDashboardSummaryViewUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DashboardSummaryView"
            }
          }
        }
      }
    },
    "/api/enduserlicenseagreement": {
      "get": {
        "tags": [
          "end-user-license-agreement-rest-server"
        ],
        "summary": "getEndUserLicenseAgreementAcceptance",
        "operationId": "getEndUserLicenseAgreementAcceptanceUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EndUserLicenseAgreementView"
            }
          }
        }
      },
      "post": {
        "tags": [
          "end-user-license-agreement-rest-server"
        ],
        "summary": "createOrUpdateEndUserLicenseAgreementAcceptance",
        "operationId": "createOrUpdateEndUserLicenseAgreementAcceptanceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "eulaAction",
            "description": "eulaAction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndUserLicenseAgreementAction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EndUserLicenseAgreementView"
            }
          }
        }
      }
    },
    "/api/externalextensions": {},
    "/api/externalextensions/{externalExtensionId}": {},
    "/api/externalextensions/{externalExtensionId}/authenticate": {},
    "/api/externalextensions/{externalExtensionId}/options/currentuser": {},
    "/api/externalextensions/{externalExtensionId}/options/global": {},
    "/api/externalextensions/{externalExtensionId}/options/users": {},
    "/api/externalextensions/{externalExtensionId}/options/users/{userId}": {},
    "/api/health-checks/liveness": {
      "get": {
        "tags": [
          "health-check-rest-server"
        ],
        "summary": "Determine the liveness status to determine if the system is in a normal, healthy state.",
        "operationId": "determineLivenessStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.health-check-liveness-1+json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckStatusView"
            }
          }
        }
      }
    },
    "/api/health-checks/readiness": {
      "get": {
        "tags": [
          "health-check-rest-server"
        ],
        "summary": "Determine the readiness status to determine if the system is ready to receive requests.",
        "operationId": "determineReadinessStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.health-check-readiness-1+json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckStatusView"
            }
          }
        }
      }
    },
    "/api/license-status-filters": {
      "get": {
        "tags": [
          "license-filter-rest-server"
        ],
        "summary": "getLicenseStatusFilterView",
        "operationId": "getLicenseStatusFilterViewUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterView"
            }
          }
        }
      }
    },
    "/api/licenses": {
      "get": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "findLicenses",
        "operationId": "findLicensesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.license-1+json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name, codeSharing",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«LicenseView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "createLicense",
        "operationId": "createLicenseUsingPOST",
        "consumes": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.license-1+json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.license-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "licenseRequest",
            "description": "licenseRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request to create a custom license"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/LicenseView"
            }
          }
        }
      }
    },
    "/api/licenses/{licenseId}": {
      "get": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "findLicense",
        "operationId": "findLicenseUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.license-1+json"
        ],
        "parameters": [
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "updateLicense",
        "operationId": "updateLicenseUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.license-1+json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.component-detail-4+json",
          "application/json",
          "application/vnd.blackducksoftware.license-1+json"
        ],
        "parameters": [
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "licenseView",
            "description": "licenseView",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicenseView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "deleteLicense",
        "operationId": "deleteLicenseUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/licenses/{licenseId}/text": {
      "get": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "getLicenseText",
        "operationId": "getLicenseTextUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "updateLicenseText",
        "operationId": "updateLicenseTextUsingPUT",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "licenseText",
            "description": "licenseText",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/notification-state-filters": {
      "get": {
        "tags": [
          "user-notification-filter-rest-server"
        ],
        "summary": "findNotificationStateFilterView",
        "operationId": "findNotificationStateFilterViewUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterView"
            }
          }
        }
      }
    },
    "/api/notification-type-filters": {
      "get": {
        "tags": [
          "user-notification-filter-rest-server"
        ],
        "summary": "getNotificationTypeFilters",
        "operationId": "getNotificationTypeFiltersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterView"
            }
          }
        }
      }
    },
    "/api/notifications": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findNotifications",
        "operationId": "findNotificationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.notification-1;charset=UTF-8",
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«NotificationView»"
            }
          }
        }
      }
    },
    "/api/notifications/{notificationId}": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findNotification",
        "operationId": "findNotificationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.notification-1+json"
        ],
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "notificationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationView"
            }
          }
        }
      }
    },
    "/api/policy-rule-enabled-filters": {
      "get": {
        "tags": [
          "policy-rule-filter-rest-server"
        ],
        "summary": "getPolicyRuleEnabledFilters",
        "operationId": "getPolicyRuleEnabledFiltersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.policy-4+json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterView"
            }
          }
        }
      }
    },
    "/api/policy-rules": {
      "get": {
        "tags": [
          "policy-rule-rest-server"
        ],
        "summary": "findPolicyRules",
        "operationId": "findPolicyRulesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.policy-rules-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name, severity, updatedAt",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search by key: name, severity in format key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«PolicyRuleView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "policy-rule-rest-server"
        ],
        "summary": "createPolicyRuleV2",
        "operationId": "createPolicyRuleV2UsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.policy-rules-2+json",
          "application/vnd.blackducksoftware.policy-4+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.policy-rules-2+json",
          "application/vnd.blackducksoftware.policy-4+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "policyRuleViewV2",
            "description": "policyRuleViewV2",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyRuleViewV2"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/PolicyRuleViewV2"
            }
          }
        }
      }
    },
    "/api/policy-rules/{policyRuleId}": {
      "get": {
        "tags": [
          "policy-rule-rest-server"
        ],
        "summary": "findPolicyRule",
        "operationId": "findPolicyRuleUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.policy-rules-1+json"
        ],
        "parameters": [
          {
            "name": "policyRuleId",
            "in": "path",
            "description": "policyRuleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyRuleView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "policy-rule-rest-server"
        ],
        "summary": "updatePolicyRuleV2",
        "operationId": "updatePolicyRuleV2UsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.policy-rules-2+json",
          "application/vnd.blackducksoftware.policy-4+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.policy-rules-2+json",
          "application/vnd.blackducksoftware.policy-4+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "policyRuleView",
            "description": "policyRuleView",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyRuleViewV2"
            }
          },
          {
            "name": "policyRuleId",
            "in": "path",
            "description": "policyRuleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyRuleViewV2"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "policy-rule-rest-server"
        ],
        "summary": "deletePolicyRule",
        "operationId": "deletePolicyRuleUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "policyRuleId",
            "in": "path",
            "description": "policyRuleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "findProjects",
        "operationId": "findProjectsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.project-1;charset=UTF-8",
          "application/vnd.blackducksoftware.project-detail-4+json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name, description, projectTier",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«ProjectView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "createProject",
        "operationId": "createProjectUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "projectRequest",
            "description": "projectRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/projects/{leftProjectId}/versions/{leftVersionId}/compare/projects/{rightProjectId}/versions/{rightVersionId}/components": {
      "get": {
        "tags": [
          "aggregate-bom-internal-rest-server"
        ],
        "summary": "diffBomComponents",
        "operationId": "diffBomComponentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "parameters": [
          {
            "name": "leftProjectId",
            "in": "path",
            "description": "leftProjectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "leftVersionId",
            "in": "path",
            "description": "leftVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "rightProjectId",
            "in": "path",
            "description": "rightProjectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "rightVersionId",
            "in": "path",
            "description": "rightVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "q",
            "in": "query",
            "description": "q",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiffPageView"
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "findProject",
        "operationId": "findProjectUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "updateProject",
        "operationId": "updateProjectUsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "projectRequest",
            "description": "projectRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectView"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "deleteProject",
        "operationId": "deleteProjectUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/projects/{projectId}/assignable-usergroups": {
      "get": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "getAssignableUserGroups",
        "operationId": "getAssignableUserGroupsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "q",
            "in": "query",
            "description": "searchText",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«AssignableUserGroupView»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/assignable-users": {
      "get": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "getAssignableUsers",
        "operationId": "getAssignableUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "q",
            "in": "query",
            "description": "searchText",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«AssignableUserView»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/roles": {
      "post": {
        "tags": [
          "project-assignment-internal-rest-server"
        ],
        "summary": "addAssignedUser",
        "operationId": "addAssignedUserUsingPOST",
        "consumes": [
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "assignmentRequests",
            "description": "assignmentRequests",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectRoleAssignmentRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/tags": {
      "get": {
        "tags": [
          "tag-rest-server"
        ],
        "summary": "getTagsByProjectId",
        "operationId": "getTagsByProjectIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PageView«TagView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "tag-rest-server"
        ],
        "summary": "createTagsByProjectId",
        "operationId": "createTagsByProjectIdUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "tagRequest",
            "description": "tagRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagView"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/projects/{projectId}/tags/{tagId}": {
      "get": {
        "tags": [
          "tag-rest-server"
        ],
        "summary": "getTag",
        "operationId": "getTagUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TagView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tag-rest-server"
        ],
        "summary": "deleteProject",
        "operationId": "deleteProjectUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/projects/{projectId}/usergroups": {
      "get": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "getAssignedUserGroups",
        "operationId": "getAssignedUserGroupsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-group-assignment-1+json",
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«AssignedUserGroupView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "addAssignedUser",
        "operationId": "addAssignedUserUsingPOST_1",
        "consumes": [
          "application/vnd.blackducksoftware.user-group-assignment-1+json",
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignedUserGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/usergroups/{userGroupId}": {
      "get": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "getAssignedUserGroup",
        "operationId": "getAssignedUserGroupUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-group-assignment-1+json",
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssignedUserGroupView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "removeAssignedUserGroup",
        "operationId": "removeAssignedUserGroupUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/users": {
      "get": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "getAssignedUsers",
        "operationId": "getAssignedUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.user-assignment-1+json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«AssignedUserView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "addAssignedUser",
        "operationId": "addAssignedUserUsingPOST_2",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.user-assignment-1+json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignedUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/users/{userId}": {
      "get": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "getAssignedUser",
        "operationId": "getAssignedUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.user-assignment-1+json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssignedUserView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "removeAssignedUser",
        "operationId": "removeAssignedUserUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/versions": {
      "get": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "findVersionsByProjectId",
        "operationId": "findVersionsByProjectIdUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.project-version-1;charset=UTF-8",
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : versionName, nickname, releaseComments, releasedOn",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«ProjectVersionView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "createVersion",
        "operationId": "createVersionUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-version-1+json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "versionRequest",
            "description": "versionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectVersionRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}": {
      "get": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "findVersion",
        "operationId": "findVersionUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-version-1+json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectVersionView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "updateVersion",
        "operationId": "updateVersionUsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-version-1+json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-version-1+json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "versionView",
            "description": "versionView",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectVersionView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectVersionView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "deleteVersion",
        "operationId": "deleteVersionUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/codelocations": {
      "get": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "findCodeLocationForProjectVersions",
        "operationId": "findCodeLocationForProjectVersionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.codelocation-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«CodeLocationView»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/comparison": {
      "get": {
        "tags": [
          "project-version-bom-comparison-rest-server"
        ],
        "summary": "diffBomComponents",
        "operationId": "diffBomComponentsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.bill-of-materials-4+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "comparedProjectVersion",
            "in": "query",
            "description": "comparedProjectVersion",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "q",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiffPageView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findBomComponents",
        "operationId": "findBomComponentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.bomcomponent-1"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "q",
            "in": "query",
            "description": "q",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«VersionBomComponentView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "addBomComponent",
        "operationId": "addBomComponentUsingPOST",
        "consumes": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualVersionBomComponentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«VersionBomComponentView»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findBomComponent",
        "operationId": "findBomComponentUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionBomComponentView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "updateBomComponent",
        "operationId": "updateBomComponentUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "reauest",
            "description": "reauest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VersionBomComponentView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionBomComponentView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/comments": {
      "get": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "findBomComponentComments",
        "operationId": "findBomComponentCommentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : createdAt, updatedAt",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«UserCommentView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "createBomComponentComment",
        "operationId": "createBomComponentCommentUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "comment",
            "description": "comment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserCommentView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/comments/{commentId}": {
      "get": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "findBomComponentComment",
        "operationId": "findBomComponentCommentUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "commentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserCommentView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "updateBomComponentComment",
        "operationId": "updateBomComponentCommentUsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "commentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "comment",
            "description": "comment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserCommentView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "deleteBomComponentComment",
        "operationId": "deleteBomComponentCommentUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "commentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/component-versions/{componentVersionId}/comments": {
      "get": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "findBomComponentVersionComments",
        "operationId": "findBomComponentVersionCommentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : createdAt, updatedAt",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«UserCommentView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "createBomComponentVersionComment",
        "operationId": "createBomComponentVersionCommentUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "comment",
            "description": "comment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserCommentView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/component-versions/{componentVersionId}/comments/{commentId}": {
      "get": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "findBomComponentVersionComment",
        "operationId": "findBomComponentVersionCommentUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "commentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserCommentView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "updateBomComponentVersionComment",
        "operationId": "updateBomComponentVersionCommentUsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.comment-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "commentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "comment",
            "description": "comment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserCommentView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bom-component-comment-rest-server"
        ],
        "summary": "deleteBomComponentVersionComment",
        "operationId": "deleteBomComponentVersionCommentUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "commentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/component-versions/{componentVersionId}/issues": {
      "post": {
        "tags": [
          "bom-component-issue-rest-server"
        ],
        "summary": "Creates a new issue for component version. Created issue is mapped to issue tracker issue",
        "operationId": "createIssueUsingPOST",
        "consumes": [
          "application/vnd.blackducksoftware.issue-1+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.issue-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "issueRequest",
            "description": "issueRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/component-versions/{componentVersionId}/issues/{hubIssueId}": {
      "put": {
        "tags": [
          "bom-component-issue-rest-server"
        ],
        "summary": "Updates issue for component version. Updated issue is mapped to issue tracker issue",
        "operationId": "updateIssueUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.issue-1+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.issue-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "issueRequest",
            "description": "issueRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "hubIssueId",
            "in": "path",
            "description": "hubIssueId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bom-component-issue-rest-server"
        ],
        "summary": "deleteIssue",
        "operationId": "deleteIssueUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "hubIssueId",
            "in": "path",
            "description": "hubIssueId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/hierarchical-components/{hierarchicalId}/children": {},
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/issues": {
      "post": {
        "tags": [
          "bom-component-issue-rest-server"
        ],
        "summary": "Creates a new issue for component. Created issue is mapped to issue tracker issue",
        "operationId": "createIssueUsingPOST_1",
        "consumes": [
          "application/vnd.blackducksoftware.issue-1+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.issue-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "issueRequest",
            "description": "issueRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/issues/{hubIssueId}": {
      "put": {
        "tags": [
          "bom-component-issue-rest-server"
        ],
        "summary": "Updates issue for component. Updated issue is mapped to issue tracker issue",
        "operationId": "updateIssueUsingPUT_1",
        "consumes": [
          "application/vnd.blackducksoftware.issue-1+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.issue-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "issueRequest",
            "description": "issueRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "hubIssueId",
            "in": "path",
            "description": "hubIssueId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bom-component-issue-rest-server"
        ],
        "summary": "deleteIssue",
        "operationId": "deleteIssueUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "hubIssueId",
            "in": "path",
            "description": "hubIssueId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/licenses/{licenseId}": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findBomComponentLicense",
        "operationId": "findBomComponentLicenseUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/licenses/{licenseId}/text": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findBomComponentLicenseText",
        "operationId": "findBomComponentLicenseTextUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/matched-files": {
      "get": {
        "tags": [
          "matched-file-rest-server"
        ],
        "summary": "findMatchedFiles",
        "operationId": "findMatchedFilesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.matched-file-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«MatchedFileView»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/policy-rules": {
      "get": {
        "tags": [
          "version-bom-policy-rest-server"
        ],
        "summary": "getPolicyRulesForComponentV2",
        "operationId": "getPolicyRulesForComponentV2UsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.policy-rules-2+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«PolicyRuleViewV2»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/policy-status": {
      "get": {
        "tags": [
          "version-bom-policy-rest-server"
        ],
        "summary": "getPolicyStatusForComponent",
        "operationId": "getPolicyStatusForComponentUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.component-policy-status-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyStatusView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findBomComponentVersion",
        "operationId": "findBomComponentVersionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionBomComponentView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "updateBomComponentVersion",
        "operationId": "updateBomComponentVersionUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "reauest",
            "description": "reauest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VersionBomComponentView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionBomComponentView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/hierarchical-components/{hierarchicalId}/children": {},
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/licenses/{licenseId}": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findBomComponentVersionLicense",
        "operationId": "findBomComponentVersionLicenseUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.bomcomponent-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/licenses/{licenseId}/text": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findBomComponentVersionLicenseText",
        "operationId": "findBomComponentVersionLicenseTextUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/matched-files": {
      "get": {
        "tags": [
          "matched-file-rest-server"
        ],
        "summary": "findMatchedFiles",
        "operationId": "findMatchedFilesUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.matched-file-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«MatchedFileView»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/origins/{componentOriginId}/matched-files": {
      "get": {
        "tags": [
          "matched-file-rest-server"
        ],
        "summary": "findMatchedFiles",
        "operationId": "findMatchedFilesUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.matched-file-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentOriginId",
            "in": "path",
            "description": "componentOriginId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«MatchedFileView»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/policy-rules": {
      "get": {
        "tags": [
          "version-bom-policy-rest-server"
        ],
        "summary": "getPolicyRulesForComponentVersionV2",
        "operationId": "getPolicyRulesForComponentVersionV2UsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.policy-rules-2+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«PolicyRuleViewV2»"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/policy-status": {
      "get": {
        "tags": [
          "version-bom-policy-rest-server"
        ],
        "summary": "getPolicyStatusForComponentVersion",
        "operationId": "getPolicyStatusForComponentVersionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.component-policy-status-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyStatusView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/hierarchical-components": {},
    "/api/projects/{projectId}/versions/{versionId}/policy-status": {
      "get": {
        "tags": [
          "version-bom-policy-rest-server"
        ],
        "summary": "findScanSummary",
        "operationId": "findScanSummaryUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.bom-policy-status-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionBomPolicyStatusView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/risk-profile": {
      "get": {
        "tags": [
          "version-risk-profile"
        ],
        "summary": "find version risk-profile",
        "operationId": "findProjectVersionRiskProfileUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json",
          "application/vnd.blackducksoftware.risk-profile-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionRiskProfileView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/vulnerable-bom-components": {
      "get": {
        "tags": [
          "vulnerable-component-rest-server"
        ],
        "summary": "findVulnerableComponents",
        "operationId": "findVulnerableComponentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.vulnerable-component-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : componentName, vulnerabilityName, severity",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«VulnerableComponentView»"
            }
          }
        }
      }
    },
    "/api/releases/{releaseId}/issues": {
      "get": {
        "tags": [
          "bom-component-issue-rest-server"
        ],
        "summary": "findIssuesByProjectVersionId",
        "operationId": "findIssuesByProjectVersionIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "releaseId",
            "in": "path",
            "description": "releaseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«BomComponentIssueView»"
            }
          }
        }
      }
    },
    "/api/reports/{reportId}": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "download",
        "operationId": "downloadUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "delete",
        "operationId": "deleteUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/reports/{reportId}/contents": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findContents",
        "operationId": "findContentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportContent"
            }
          }
        }
      }
    },
    "/api/risk-profile-dashboard": {
      "get": {
        "tags": [
          "risk-profile-rest-server"
        ],
        "summary": "getProjectDashboardRiskAmalgamation",
        "operationId": "getProjectDashboardRiskAmalgamationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.internal-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pageRequest",
            "description": "pageRequest",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PageRequest"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "q",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectDashboardRiskAmalgamation"
            }
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "role-rest-server"
        ],
        "summary": "getRolesPublic",
        "operationId": "getRolesPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.role-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name,description",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«RoleView»"
            }
          }
        }
      }
    },
    "/api/roles/{roleId}": {
      "get": {
        "tags": [
          "role-rest-server"
        ],
        "summary": "getRolePublic",
        "operationId": "getRolePublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.role-1+json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleView"
            }
          }
        }
      }
    },
    "/api/roles/{roleId}/inheriting-users": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getUsersByInheritedRolePublic",
        "operationId": "getUsersByInheritedRolePublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.user-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«UserView»"
            }
          }
        }
      }
    },
    "/api/roles/{roleId}/users": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getUsersByRolePublic",
        "operationId": "getUsersByRolePublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.user-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«UserView»"
            }
          }
        }
      }
    },
    "/api/search/components": {
      "get": {
        "tags": [
          "search-rest-server"
        ],
        "summary": "searchByComponentName",
        "operationId": "searchByComponentNameUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "allRequestParams",
            "in": "query",
            "description": "allRequestParams",
            "required": false,
            "type": "ref"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "description": "q=name:tomcat, q=tomcat",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«ComponentSearchResult»"
            }
          }
        }
      }
    },
    "/api/user-status-filters": {
      "get": {
        "tags": [
          "user-filters-rest-server"
        ],
        "summary": "findUserStatusFilterView",
        "operationId": "findUserStatusFilterViewUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterView"
            }
          }
        }
      }
    },
    "/api/usergroups": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "page",
        "operationId": "pageUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.usergroup-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "q",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "activeOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«UserGroupView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "create",
        "operationId": "createUsingPOST_1",
        "consumes": [
          "application/vnd.blackducksoftware.usergroup-1+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.usergroup-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userGroupRequest",
            "description": "userGroupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupView"
            }
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "get",
        "operationId": "getUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.usergroup-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "update",
        "operationId": "updateUsingPUT_1",
        "consumes": [
          "application/vnd.blackducksoftware.usergroup-1+json",
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.usergroup-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "userGroupView",
            "description": "userGroupView",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "delete",
        "operationId": "deleteUsingDELETE_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}/projects": {
      "get": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "getProjectsAssignedToUserGroup",
        "operationId": "getProjectsAssignedToUserGroupUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.project-assignment-1+json",
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«AssignedProjectView»"
            }
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}/roles": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "getRolesByUserGroup",
        "operationId": "getRolesByUserGroupUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«RoleAssignmentView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "addRoleForUserGroup",
        "operationId": "addRoleForUserGroupUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.role-assignment-1+json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "roleAssignmentRequest",
            "description": "roleAssignmentRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleAssignmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentView"
            }
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}/roles/{roleAssignmentId}": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "getRoleAssignmentForUserGroup",
        "operationId": "getRoleAssignmentForUserGroupUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.role-assignment-1+json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "roleAssignmentId",
            "in": "path",
            "description": "roleAssignmentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "deleteRoleAssignmentForUserGroup",
        "operationId": "deleteRoleAssignmentForUserGroupUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "roleAssignmentId",
            "in": "path",
            "description": "roleAssignmentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}/users": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "getAssignedUsers",
        "operationId": "getAssignedUsersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json",
          "application/vnd.blackducksoftware.assigned-user-1+json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : userName, email, firstName, lastName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«UserView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "addUsersToUserGroup",
        "operationId": "addUsersToUserGroupUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "userAssignments",
            "description": "userAssignments",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserAssignmentRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}/users/{userId}": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "getAssignedUser",
        "operationId": "getAssignedUserUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json",
          "application/vnd.blackducksoftware.assigned-user-1+json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "removeUserFromUserGroup",
        "operationId": "removeUserFromUserGroupUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "findUsers",
        "operationId": "findUsersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.user-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : userName, email, firstName, lastName",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          },
          {
            "name": "rql",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«UserView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "createUser",
        "operationId": "createUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userRequest",
            "description": "userRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          }
        }
      }
    },
    "/api/users/{userId}": {
      "get": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "findUser",
        "operationId": "findUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "updateUser",
        "operationId": "updateUserUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "description": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          }
        }
      }
    },
    "/api/users/{userId}/changepassword": {
      "put": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "changePasswordCurrentUser",
        "operationId": "changePasswordCurrentUserUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "item",
            "description": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordCurrentUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/inherited-roles": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getInheritedRolesByUserPublic",
        "operationId": "getInheritedRolesByUserPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.role-assignment-1;charset=UTF-8",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name,description",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«RoleAssignmentView»"
            }
          }
        }
      }
    },
    "/api/users/{userId}/notification-counts": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findUserNotificationsCount",
        "operationId": "findUserNotificationsCountUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/vnd.blackducksoftware.notification-counts-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/notification-states": {
      "put": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "updateAllNotificationState",
        "operationId": "updateAllNotificationStateUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.notification-state-1+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "stateRequest",
            "description": "stateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationStateRequest"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/notification-subscriptions": {
      "get": {
        "tags": [
          "notification-subscription-rest-server"
        ],
        "summary": "findNotificationSubscriptions",
        "operationId": "findNotificationSubscriptionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.notification-subscription-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«NotificationSubscriptionView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "notification-subscription-rest-server"
        ],
        "summary": "createNotificationSubscription",
        "operationId": "createNotificationSubscriptionUsingPOST",
        "consumes": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/vnd.blackducksoftware.notification-subscription-1+json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.notification-subscription-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "subscriptionTarget",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/users/{userId}/notification-subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "notification-subscription-rest-server"
        ],
        "summary": "findNotificationSubscription",
        "operationId": "findNotificationSubscriptionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.notification-subscription-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "subscriptionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationSubscriptionView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "notification-subscription-rest-server"
        ],
        "summary": "deleteNotificationSubscription",
        "operationId": "deleteNotificationSubscriptionUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "subscriptionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/users/{userId}/notifications": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findUserNotifications",
        "operationId": "findUserNotificationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.notification-user-1;charset=UTF-8",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«NotificationUserView»"
            }
          }
        }
      }
    },
    "/api/users/{userId}/notifications/{notificationId}": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findUserNotification",
        "operationId": "findUserNotificationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.notification-user-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "notificationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationUserView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "updateUserNotification",
        "operationId": "updateUserNotificationUsingPUT",
        "consumes": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.notification-user-1+json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-4+json",
          "application/json",
          "application/vnd.blackducksoftware.notification-user-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "notificationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "userView",
            "description": "userView",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationUserView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationUserView"
            }
          }
        }
      }
    },
    "/api/users/{userId}/projects": {
      "get": {
        "tags": [
          "project-assignment-rest-server"
        ],
        "summary": "getProjectsAssignedToUserOrUsersGroups",
        "operationId": "getProjectsAssignedToUserOrUsersGroupsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.inherited-project-assignment-1+json",
          "application/json",
          "application/vnd.blackducksoftware.project-detail-4+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«AssignedInheritedProjectView»"
            }
          }
        }
      }
    },
    "/api/users/{userId}/resetpassword": {
      "put": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "resetPassword",
        "operationId": "resetPasswordUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "item",
            "description": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/roles": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getRolesByUserPublic",
        "operationId": "getRolesByUserPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.role-assignment-1;charset=UTF-8",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name,description",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«RoleAssignmentView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "addRoleForUserPublic",
        "operationId": "addRoleForUserPublicUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.role-assignment-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "roleAssignmentRequest",
            "description": "roleAssignmentRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleAssignmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentView"
            }
          }
        }
      }
    },
    "/api/users/{userId}/roles/{roleAssignmentId}": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getRoleAssignmentForUserPublic",
        "operationId": "getRoleAssignmentForUserPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.role-assignment-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "roleAssignmentId",
            "in": "path",
            "description": "roleAssignmentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "deleteRoleAssignmentForUserPublic",
        "operationId": "deleteRoleAssignmentForUserPublicUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "roleAssignmentId",
            "in": "path",
            "description": "roleAssignmentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/usergroups": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "getUserAssignedGroups",
        "operationId": "getUserAssignedGroupsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.assigned-usergroup-1+json",
          "application/vnd.blackducksoftware.list-1+json;itemtype=vnd.blackducksoftware.usergroup-1;charset=UTF-8",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name,description",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«UserGroupView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "addUserToGroups",
        "operationId": "addUserToGroupsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "groupsAssignment",
            "description": "groupsAssignment",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroupAssignmentRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/usergroups/{userGroupId}": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "getSpecificUserAssignedToGroup",
        "operationId": "getSpecificUserAssignedToGroupUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.usergroup-1+json",
          "application/json",
          "application/vnd.blackducksoftware.assigned-usergroup-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "deleteUserFromGroup",
        "operationId": "deleteUserFromGroupUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/versions/{versionId}/license-reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVersionLicenseReports",
        "operationId": "findVersionLicenseReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«ReportView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVersionLicenseReport",
        "operationId": "createVersionLicenseReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "versionBasedReportRequest",
            "description": "The License Report only supports the TEXT and JSON report formats in the VersionBasedReportRequest.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VersionBasedReportRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/versions/{versionId}/license-reports/{reportId}": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVersionLicenseReport",
        "operationId": "findVersionLicenseReportUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "deleteVersionLicenseReport",
        "operationId": "deleteVersionLicenseReportUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/versions/{versionId}/reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVersionReports",
        "operationId": "findVersionReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«ReportView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVersionReport",
        "operationId": "createVersionReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "versionReportRequest",
            "description": "The Version Report only supports the CSV and JSON report formats in the VersionReportRequest.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VersionReportRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/versions/{versionId}/reports/{reportId}": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVersionReport",
        "operationId": "findVersionReportUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "deleteVersionReport",
        "operationId": "deleteVersionReportUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/vulnerabilities/vulndb-copy": {
      "post": {
        "tags": [
          "vuln-db-report-db-copy-rest-server"
        ],
        "summary": "createCopy",
        "operationId": "createCopyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "202": {}
        }
      }
    },
    "/api/vulnerabilities/{vulnerabilityId}": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds a specific vulnerability record",
        "operationId": "findV2VulnerabilityUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.vulnerability-4+json",
          "application/json",
          "application/vnd.blackducksoftware.vulnerability-2+json"
        ],
        "parameters": [
          {
            "name": "vulnerabilityId",
            "in": "path",
            "description": "vulnerabilityId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VulnerabilityV2View"
            }
          }
        }
      }
    },
    "/api/vulnerability-remediation-reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVulnerabilityRemediationReports",
        "operationId": "findVulnerabilityRemediationReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«ReportView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVulnerabilityRemediationReport",
        "operationId": "createVulnerabilityRemediationReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The Vulnerability Remediation Report always uses the JSON report format.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/vulnerability remediation report request"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/vulnerability-reports/{reportId}": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVulnerabilityReport",
        "operationId": "findVulnerabilityReportUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "deleteVulnerabilityReport",
        "operationId": "deleteVulnerabilityReportUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/vulnerability-status-reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVulnerabilityStatusReports",
        "operationId": "findVulnerabilityStatusReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«ReportView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVulnerabilityStatusReport",
        "operationId": "createVulnerabilityStatusReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "simpleReportRequest",
            "description": "The VulnerabilityStatusReport only supports the CSV and JSON report formats in the SimpleReportRequest.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SimpleReportRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/vulnerability-update-reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVulnerabilityUpdateReports",
        "operationId": "findVulnerabilityUpdateReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView«ReportView»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVulnerabilityUpdateReport",
        "operationId": "createVulnerabilityUpdateReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-4+json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The Vulnerability Update Report always uses the JSON Report Format.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VulnerabilityUpdateReportRestRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    }
  },
  "definitions": {
    "PolicyRuleExpressionView": {
      "properties": {
        "name": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/PolicyRuleExpressionParameter"
        }
      }
    },
    "UserGroupWithRolesView": {
      "required": [
        "createdFrom",
        "name"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the user group is active and usable within the system"
        },
        "createdFrom": {
          "type": "string",
          "description": "The system that provided the group",
          "enum": [
            "INTERNAL",
            "LDAP",
            "SITEMINDER",
            "X509"
          ]
        },
        "externalName": {
          "type": "string",
          "description": "Name used to identify the group within another system"
        },
        "name": {
          "type": "string",
          "description": "The identifying label of the user group"
        },
        "roles": {
          "type": "array",
          "description": "The overall roles provided by this group",
          "items": {
            "$ref": "#/definitions/RoleAssignmentView"
          }
        },
        "userGroup": {
          "type": "string",
          "description": "URL where a representation of the user group may be read from"
        }
      }
    },
    "PolicyRuleExpression": {
      "properties": {
        "name": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRuleExpressionValue"
          }
        }
      }
    },
    "JsonNode": {
      "properties": {
        "array": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "float": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "null": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "object": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        }
      }
    },
    "PageView«AssignableUserView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignableUserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«RoleAssignmentView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignmentView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Optional«boolean»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "OriginDependencyView": {
      "properties": {
        "componentName": {
          "type": "string",
          "description": "Label summarizing the component identity of the dependency component found"
        },
        "discoveryType": {
          "type": "string",
          "description": "Discovery type of the dependency component"
        },
        "originId": {
          "type": "string",
          "description": "ID indicating where the dependency component came from"
        },
        "originName": {
          "type": "string",
          "description": "Label specifying the origin of the depndency component found"
        },
        "scope": {
          "type": "string",
          "description": "Scope of the dependency component"
        },
        "versionName": {
          "type": "string",
          "description": "Label specifying the specific version of the dependency component found"
        }
      }
    },
    "ExternalExtensionRequest": {
      "required": [
        "infoUrl"
      ],
      "properties": {
        "infoUrl": {
          "type": "string",
          "description": "The URL the extension hosts a representation of its general information at"
        }
      }
    },
    "Cvss2TemporalMetricsView": {
      "properties": {
        "exploitability": {
          "type": "string",
          "description": "Exploitability metric",
          "enum": [
            "NOT_DEFINED",
            "HIGH",
            "FUNCTIONAL",
            "UNPROVEN"
          ]
        },
        "remediationLevel": {
          "type": "string",
          "description": "Remediation level metric",
          "enum": [
            "NOT_DEFINED",
            "UNAVAILABLE",
            "WORKAROUND",
            "TEMPORARY_FIX",
            "OFFICIAL_FIX"
          ]
        },
        "reportConfidence": {
          "type": "string",
          "description": "Report confidence metric",
          "enum": [
            "NOT_DEFINED",
            "UNCONFIRMED",
            "UNCORROBORATED",
            "CONFIRMED"
          ]
        },
        "score": {
          "type": "number",
          "format": "double",
          "description": "Score metric"
        }
      },
      "description": "Representation of CVSS V2 temporal metrics"
    },
    "Optional«RemediatingVersionView»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "VulnerabilityV2ClassificationView": {
      "properties": {
        "description": {
          "type": "string",
          "description": "The description for this classification."
        },
        "longName": {
          "type": "string",
          "description": "The long-format name for this classification."
        },
        "name": {
          "type": "string",
          "description": "The name for this classification."
        }
      },
      "description": "V2 representation of a potential software security issue classification."
    },
    "PolicyRuleExpressionSet": {
      "properties": {
        "expressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRuleExpression"
          }
        },
        "operator": {
          "type": "string",
          "enum": [
            "AND",
            "OR"
          ]
        }
      }
    },
    "NotificationStateRequest": {
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "NEW",
            "SEEN",
            "VISITED",
            "HIDDEN"
          ]
        }
      }
    },
    "UrlDirectoryInternalView": {
      "required": [
        "bomImport",
        "codeLocations",
        "components",
        "licenseManagement",
        "projects",
        "roles",
        "userGroups",
        "userStatusFilters",
        "users",
        "vulnerabilityRemidiationReports",
        "vulnerabilityStatusReports",
        "vulnerabilityUpdateReports"
      ],
      "properties": {
        "bomImport": {
          "type": "string",
          "description": "Location for uploading BOM import files"
        },
        "codeLocations": {
          "type": "string",
          "description": "Location for representations of code locations"
        },
        "companyLogo": {
          "type": "string",
          "description": "CompanyLogo"
        },
        "componentDashboard": {
          "type": "string",
          "description": "Component dash board"
        },
        "componentManagement": {
          "type": "string",
          "description": "Component Management"
        },
        "components": {
          "type": "string",
          "description": "Location for representations of components"
        },
        "createProject": {
          "type": "string",
          "description": "Create Project"
        },
        "debug": {
          "type": "string",
          "description": "Debug"
        },
        "extensions": {
          "type": "string",
          "description": "Extensions"
        },
        "jobs": {
          "type": "string",
          "description": "Jobs"
        },
        "ldap": {
          "type": "string",
          "description": "Ldap"
        },
        "licenseManagement": {
          "type": "string",
          "description": "License management"
        },
        "notificationStateFilters": {
          "type": "string",
          "description": "Location for representations of notification state filters"
        },
        "notificationTypeFilters": {
          "type": "string",
          "description": "Location for representations of notification type filters"
        },
        "notifications": {
          "type": "string",
          "description": "Location for representations of notifications"
        },
        "policyRules": {
          "type": "string",
          "description": "Location for representations of policy rules"
        },
        "projectDashboard": {
          "type": "string",
          "description": "Project dash board"
        },
        "projects": {
          "type": "string",
          "description": "Location for representations of projects"
        },
        "registration": {
          "type": "string",
          "description": "Registration"
        },
        "roles": {
          "type": "string",
          "description": "Location for representations of roles"
        },
        "securityDashboard": {
          "type": "string",
          "description": "Security dash board"
        },
        "sso": {
          "type": "string",
          "description": "Single Sign On"
        },
        "summaryDashboard": {
          "type": "string",
          "description": "Summary dash board"
        },
        "userGroups": {
          "type": "string",
          "description": "Location for representations of user groups"
        },
        "userStatusFilters": {
          "type": "string",
          "description": "Location for representations of user status filters"
        },
        "users": {
          "type": "string",
          "description": "Location for representations of users"
        },
        "vulnerabilityRemidiationReports": {
          "type": "string",
          "description": "Location for representations of vulnerability remidiation reports"
        },
        "vulnerabilityStatusReports": {
          "type": "string",
          "description": "Location for representations of vulnerability status reports"
        },
        "vulnerabilityUpdateReports": {
          "type": "string",
          "description": "Location for representations of vulnerability update reports"
        }
      }
    },
    "PageView«CodeLocationView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeLocationView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«ExternalExtensionUserView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalExtensionUserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FilterView": {
      "properties": {
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterValueView"
          }
        }
      }
    },
    "VulnerableComponentView": {
      "required": [
        "componentName",
        "vulnerabilityWithRemediation"
      ],
      "properties": {
        "component": {
          "$ref": "#/definitions/Optional«string»"
        },
        "componentName": {
          "type": "string"
        },
        "componentVersion": {
          "$ref": "#/definitions/Optional«string»"
        },
        "componentVersionName": {
          "$ref": "#/definitions/Optional«string»"
        },
        "componentVersionOriginId": {
          "$ref": "#/definitions/Optional«string»"
        },
        "componentVersionOriginName": {
          "$ref": "#/definitions/Optional«string»"
        },
        "license": {
          "$ref": "#/definitions/Optional«ComplexLicenseView»"
        },
        "vulnerabilityWithRemediation": {
          "$ref": "#/definitions/VulnerabilityWithRemediationView"
        }
      }
    },
    "UserGroupAssignmentRequest": {
      "required": [
        "userGroupUrl"
      ],
      "properties": {
        "userGroupUrl": {
          "type": "string"
        }
      }
    },
    "VersionBomOriginView": {
      "properties": {
        "externalId": {
          "description": "The ID of the release in the external system",
          "$ref": "#/definitions/Optional«string»"
        },
        "externalNamespace": {
          "description": "Identifier of the external system the release is part of",
          "$ref": "#/definitions/Optional«string»"
        },
        "externalNamespaceDistribution": {
          "description": "Whether the origin is a distribution",
          "$ref": "#/definitions/Optional«boolean»"
        },
        "name": {
          "type": "string",
          "description": "General label for the release within the external system"
        }
      }
    },
    "AssignableUserView": {
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the represented user is active"
        },
        "email": {
          "type": "string",
          "description": "The assignable user's email"
        },
        "firstName": {
          "type": "string",
          "description": "The assignable user's first name"
        },
        "lastName": {
          "type": "string",
          "description": "The assignable user's last name"
        },
        "name": {
          "type": "string",
          "description": "The assignable user's name"
        },
        "user": {
          "type": "string",
          "description": "URL where a representation of the user may be read from"
        }
      }
    },
    "RiskProfileView": {
      "properties": {
        "counts": {
          "type": "array",
          "description": "The risk at multiple severity levels",
          "items": {
            "$ref": "#/definitions/RiskCountView"
          }
        }
      }
    },
    "ProjectRiskProfile": {
      "properties": {
        "bomCount": {
          "type": "integer",
          "format": "int32"
        },
        "bomViewEntryIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastBomUpdateDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastScanDate": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "policyStatus": {
          "$ref": "#/definitions/Optional«string»"
        },
        "policyStatusSummaries": {
          "$ref": "#/definitions/Optional«Set«PolicyStatusSummary»»"
        },
        "releaseCount": {
          "type": "integer",
          "format": "int32"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "tier": {
          "$ref": "#/definitions/Optional«int»"
        }
      }
    },
    "ManualVersionBomComponentRequest": {
      "required": [
        "component"
      ],
      "properties": {
        "component": {
          "type": "string"
        }
      }
    },
    "PolicyRuleViewV2": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByUser": {
          "type": "string",
          "description": "URL where more information on the creating user can be found"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "expression": {
          "$ref": "#/definitions/PolicyRuleExpressionSetView"
        },
        "name": {
          "type": "string"
        },
        "overridable": {
          "type": "boolean"
        },
        "severity": {
          "$ref": "#/definitions/Optional«string»"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedByUser": {
          "type": "string",
          "description": "URL where more information on the last user to update the policy can be found"
        }
      }
    },
    "RoleAssignmentRequest": {
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "AssignedUserRequest": {
      "properties": {
        "user": {
          "type": "string",
          "description": "URL where a representation of the user being assigned may be read from"
        }
      }
    },
    "PageView«ComponentVersionReferenceView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentVersionReferenceView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«UserView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VulnerabilityV2View": {
      "properties": {
        "classifications": {
          "type": "array",
          "description": "The vulnerability's classifications.",
          "items": {
            "$ref": "#/definitions/VulnerabilityV2ClassificationView"
          }
        },
        "credit": {
          "description": "Name of the person who discovered the vulnerability.",
          "$ref": "#/definitions/Optional«string»"
        },
        "cvss2": {
          "description": "The common vulnerability scoring system V2 metrics for the vulnerability.",
          "$ref": "#/definitions/Optional«VulnerabilityV2Cvss2View»"
        },
        "cvss3": {
          "description": "The common vulnerability scoring system V3 metrics for the vulnerability.",
          "$ref": "#/definitions/Optional«VulnerabilityV2Cvss3View»"
        },
        "description": {
          "type": "string",
          "description": "Short summary of the vulnerability's properties."
        },
        "disclosureDate": {
          "description": "The date the vulnerability was disclosed.",
          "$ref": "#/definitions/Optional«DateTime»"
        },
        "discoveryDate": {
          "description": "The date the vulnerability was discovered.",
          "$ref": "#/definitions/Optional«DateTime»"
        },
        "exploitPublishDate": {
          "description": "The date the exploit was published.",
          "$ref": "#/definitions/Optional«DateTime»"
        },
        "name": {
          "type": "string",
          "description": "The identifying name of the vulnerability."
        },
        "parentAdvisory": {
          "description": "Boolean indicating if this is a parent advisory of other advisories.",
          "$ref": "#/definitions/Optional«boolean»"
        },
        "publishedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the vulnerability was created/published."
        },
        "severity": {
          "description": "The general level of risk severity presented by the vulnerability.",
          "$ref": "#/definitions/Optional«string»"
        },
        "solution": {
          "description": "The solution description.",
          "$ref": "#/definitions/Optional«string»"
        },
        "solutionDate": {
          "description": "The date the solution was published.",
          "$ref": "#/definitions/Optional«DateTime»"
        },
        "source": {
          "type": "string",
          "description": "The vulnerability database/reporting authority this vulnerability originates from.",
          "enum": [
            "NVD",
            "VULNDB"
          ]
        },
        "technicalDescription": {
          "description": "Technical description of the vulnerability's properties.",
          "$ref": "#/definitions/Optional«string»"
        },
        "title": {
          "description": "The title of the vulnerability.",
          "$ref": "#/definitions/Optional«string»"
        },
        "underReview": {
          "description": "Boolean indicating if this vulnerability is under review.",
          "$ref": "#/definitions/Optional«boolean»"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the last modification to the vulnerability information."
        },
        "vendorFixDate": {
          "description": "The date the vendor fixed the vulnerability.",
          "$ref": "#/definitions/Optional«DateTime»"
        },
        "vendorNotifiedDate": {
          "description": "The date the vendor was notified of the vulnerability.",
          "$ref": "#/definitions/Optional«DateTime»"
        },
        "workaround": {
          "description": "Workaround for the vulnerability.",
          "$ref": "#/definitions/Optional«string»"
        },
        "zeroDay": {
          "description": "Boolean indicating if this is a zero-day vulnerability.",
          "$ref": "#/definitions/Optional«boolean»"
        }
      },
      "description": "V2 representation of a potential software security issue"
    },
    "ReportFileContent": {
      "properties": {
        "fileContent": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileNamePrefix": {
          "type": "string"
        }
      }
    },
    "ComponentDetailsView": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "KB"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "PROJECT",
            "COMPONENT"
          ]
        },
        "versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentVersionDetails"
          }
        }
      }
    },
    "VulnerabilityV2Cvss2View": {
      "properties": {
        "accessComplexity": {
          "type": "string",
          "description": "How difficult it is to exploit the vulnerability",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        },
        "accessVector": {
          "type": "string",
          "description": "How the vulnerability may be exploited",
          "enum": [
            "LOCAL",
            "ADJACENT_NETWORK",
            "NETWORK"
          ]
        },
        "authentication": {
          "type": "string",
          "description": "How many times authentication is required from the attacker to exploit the vulnerability",
          "enum": [
            "MULTIPLE",
            "SINGLE",
            "NONE"
          ]
        },
        "availabilityImpact": {
          "type": "string",
          "description": "Impact on the availability of the system if the vulnerability is exploited",
          "enum": [
            "COMPLETE",
            "PARTIAL",
            "NONE"
          ]
        },
        "baseScore": {
          "type": "number",
          "format": "double",
          "description": "Score summarizing the overall risk presented by the vulnerability"
        },
        "confidentialityImpact": {
          "type": "string",
          "description": "Impact on the confidentiality of data on the system if the vulnerability is exploited",
          "enum": [
            "COMPLETE",
            "PARTIAL",
            "NONE"
          ]
        },
        "exploitabilitySubscore": {
          "type": "number",
          "format": "double",
          "description": "Sub-score detailing the risk presented by current exploit techniques or exploit availability"
        },
        "impactSubscore": {
          "type": "number",
          "format": "double",
          "description": "Sub-score detailing the data exposure that occurs if the vulnerability is successfully exploited"
        },
        "integrityImpact": {
          "type": "string",
          "description": "Impact on the integrity of data on the system if the vulnerability is exploited",
          "enum": [
            "COMPLETE",
            "PARTIAL",
            "NONE"
          ]
        },
        "temporalMetrics": {
          "description": "CVSS V2 temporal metrics.",
          "$ref": "#/definitions/Optional«Cvss2TemporalMetricsView»"
        },
        "vector": {
          "description": "CVSS V2 vector.",
          "$ref": "#/definitions/Optional«string»"
        }
      },
      "description": "V2 representation of a potential software security issue common vulnerability scoring system v2 data."
    },
    "PageView«ComponentSearchResultView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentSearchResultView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Optional«DateTime»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "Optional«int»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "Request to create a custom license": {
      "required": [
        "codeSharing",
        "licenseStatus",
        "name",
        "text"
      ],
      "properties": {
        "codeSharing": {
          "type": "string",
          "description": "The license family",
          "enum": [
            "PERMISSIVE",
            "RECIPROCAL",
            "WEAK_RECIPROCAL",
            "RECIPROCAL_AGPL",
            "UNKNOWN"
          ]
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp with the license will be expired"
        },
        "licenseStatus": {
          "type": "string",
          "description": "The status of the license: Discovered, Draft or Final",
          "enum": [
            "UNREVIEWED",
            "APPROVED",
            "REJECTED",
            "CONDITIONALLY_APPROVED"
          ]
        },
        "name": {
          "type": "string",
          "description": "The general identifier of the license"
        },
        "notes": {
          "type": "string",
          "description": "The license's notes"
        },
        "text": {
          "type": "string",
          "description": "The license text"
        }
      }
    },
    "CustomComponentRequest": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Summary of what the component represents"
        },
        "name": {
          "type": "string",
          "description": "The general identifier of the component"
        },
        "url": {
          "type": "string",
          "description": "The URL of the component"
        },
        "version": {
          "description": "Specification of the initial version to create with the custom component",
          "$ref": "#/definitions/CustomComponentVersionRequest"
        }
      }
    },
    "EndUserLicenseAgreementView": {
      "properties": {
        "acceptedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PageView«NotificationView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«PolicyRuleView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRuleView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ChangePasswordCurrentUser": {
      "required": [
        "newPassword",
        "oldPassword"
      ],
      "properties": {
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "PageView«ReportView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ExternalExtensionUserView": {
      "properties": {
        "extensionOptions": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "ProjectRequest": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Summary of what the project represents in terms of functionality and use"
        },
        "name": {
          "type": "string",
          "description": "The general identifier of the project"
        },
        "projectLevelAdjustments": {
          "type": "boolean",
          "description": "Whether BOM level adjustments are applied at the project level (to all releases)"
        },
        "projectOwner": {
          "type": "string",
          "description": "The user url who is the project owner"
        },
        "projectTier": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed values : [1,2,3,4,5]"
        },
        "versionRequest": {
          "description": "Specification of the initial version to create with the project",
          "$ref": "#/definitions/ProjectVersionRequest"
        }
      }
    },
    "PolicyRuleExpressionSetView": {
      "properties": {
        "expressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRuleExpressionView"
          }
        },
        "operator": {
          "type": "string",
          "enum": [
            "AND",
            "OR"
          ]
        }
      }
    },
    "CweCommonConsequenceView": {
      "properties": {
        "note": {
          "description": "The note.",
          "$ref": "#/definitions/Optional«string»"
        },
        "scopes": {
          "type": "array",
          "description": "The scopes for this common weakness.",
          "items": {
            "type": "string",
            "enum": [
              "CONFIDENTIALITY",
              "INTEGRITY",
              "AVAILABILITY",
              "ACCESS_CONTROL",
              "NON_REPUDIATION",
              "ACCOUNTABILITY",
              "AUTHENTICATION",
              "AUTHORIZATION",
              "OTHER"
            ]
          }
        },
        "technicalImpacts": {
          "type": "array",
          "description": "The technical impacts of this common weakness.",
          "items": {
            "type": "string",
            "enum": [
              "MODIFY_MEMORY",
              "READ_MEMORY",
              "MODIFY_FILES_OR_DIRECTORIES",
              "READ_FILES_OR_DIRECTORIES",
              "MODIFY_APPLICATION_DATA",
              "READ_APPLICATION_DATA",
              "DOS_CRASH_EXIT_RESTART",
              "DOS_AMPLIFICATION",
              "DOS_INSTABILITY",
              "DOS_RESOURCE_CONSUMPTION_CPU",
              "DOS_RESOURCE_CONSUMPTION_MEM",
              "DOS_RESOURCE_CONSUMPTION_OTHER",
              "EXECUTE_UNAUTHORIZED_CODE",
              "GAIN_PRIVILEGES",
              "BYPASS_PROTECTION",
              "HIDE_ACTIVITIES",
              "ALTER_EXECUTION_LOGIC",
              "OTHER",
              "VARIES_BY_CONTEXT",
              "QUALITY_DEGREDATION",
              "UNEXPECTED_STATE"
            ]
          }
        }
      },
      "description": "Representation of a common weakness enumeration (CWE) common consequence."
    },
    "NotificationUserView": {
      "properties": {
        "content": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "notificationState": {
          "type": "string",
          "enum": [
            "NEW",
            "SEEN",
            "VISITED",
            "HIDDEN"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "POLICY_OVERRIDE",
            "RULE_VIOLATION",
            "VULNERABILITY",
            "LICENSE_LIMIT",
            "RULE_VIOLATION_CLEARED"
          ]
        }
      }
    },
    "VersionBomPolicyStatusView": {
      "properties": {
        "componentVersionPolicyViolationDetails": {
          "$ref": "#/definitions/ComponentVersionPolicyViolationDetails"
        },
        "componentVersionStatusCounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePairView"
          }
        },
        "overallStatus": {
          "type": "string",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "VersionBomComponentDiffView": {
      "properties": {
        "component": {
          "description": "Representation of the component version from the second (\"right\") project version, or from the first (\"left\") if the component version was removed",
          "$ref": "#/definitions/VersionBomComponentView"
        },
        "componentState": {
          "type": "string",
          "description": "State of the component in the directional diff",
          "enum": [
            "UNCHANGED",
            "ADDED",
            "REMOVED",
            "CHANGED"
          ]
        },
        "componentVersionState": {
          "type": "string",
          "description": "State of the component version in the directional diff",
          "enum": [
            "UNCHANGED",
            "ADDED",
            "REMOVED",
            "CHANGED"
          ]
        },
        "leftLicenses": {
          "type": "array",
          "description": "Any license(s) associated with the component version's use in the first (\"left\") project version; null if unchanged",
          "items": {
            "$ref": "#/definitions/VersionBomLicenseView"
          }
        },
        "leftUsages": {
          "type": "array",
          "description": "The usage(s) of the component version within the first (\"left\") project version; null if unchanged",
          "items": {
            "type": "string",
            "enum": [
              "DYNAMICALLY_LINKED",
              "STATICALLY_LINKED",
              "SOURCE_CODE",
              "DEV_TOOL_EXCLUDED",
              "SEPARATE_WORK",
              "IMPLEMENTATION_OF_STANDARD"
            ]
          }
        }
      }
    },
    "PageView«VulnerableComponentView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VulnerableComponentView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Optional«string»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "ReviewedDetails": {
      "properties": {
        "reviewedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the version bom component was reviewed at"
        },
        "reviewedBy": {
          "type": "string",
          "description": "The user url of the reviewer"
        }
      }
    },
    "PolicyRuleExpressionParameter": {
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CryptoAlgorithmView": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "keyLengths": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "keyLengthsType": {
          "type": "string",
          "enum": [
            "OPEN_RANGE",
            "CLOSED_RANGE",
            "MULTI",
            "FIXED",
            "NONE"
          ]
        },
        "knownWeaknesses": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "licensingInfo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "originator": {
          "type": "string"
        },
        "patentInfo": {
          "type": "string"
        }
      }
    },
    "PageView«ExternalExtensionView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalExtensionView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«AssignedUserGroupView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedUserGroupView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«MatchedFileView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchedFileView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Cvss3TemporalMetricsView": {
      "properties": {
        "exploitability": {
          "type": "string",
          "description": "Exploitability metric",
          "enum": [
            "NOT_DEFINED",
            "HIGH",
            "FUNCTIONAL",
            "PROOF_OF_CONCEPT",
            "UNPROVEN"
          ]
        },
        "remediationLevel": {
          "type": "string",
          "description": "Remediation level metric",
          "enum": [
            "NOT_DEFINED",
            "UNAVAILABLE",
            "WORKAROUND",
            "TEMPORARY_FIX",
            "OFFICIAL_FIX"
          ]
        },
        "reportConfidence": {
          "type": "string",
          "description": "Report confidence metric",
          "enum": [
            "NOT_DEFINED",
            "CONFIRMED",
            "REASONABLE",
            "UNKNOWN"
          ]
        },
        "score": {
          "type": "number",
          "format": "double",
          "description": "Score metric"
        }
      },
      "description": "Representation of CVSS V3 temporal metrics"
    },
    "SimpleReportRequest": {
      "required": [
        "reportFormat"
      ],
      "properties": {
        "reportFormat": {
          "type": "string",
          "enum": [
            "CSV",
            "JSON",
            "TEXT"
          ]
        }
      }
    },
    "CodeLocationView": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the code location was created"
        },
        "mappedProjectVersion": {
          "description": "URL specifying the version linked to the code location",
          "$ref": "#/definitions/Optional«string»"
        },
        "name": {
          "type": "string",
          "description": "The code location name"
        },
        "scanSize": {
          "description": "The scan size for this code location",
          "$ref": "#/definitions/Optional«long»"
        },
        "type": {
          "type": "string",
          "description": "Location classification relating to where the source comes from",
          "enum": [
            "SCM",
            "FS",
            "BOM_IMPORT"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the code location was last updated"
        },
        "url": {
          "type": "string",
          "description": "URL describing the location of the source"
        }
      }
    },
    "Page«ProjectVersionView»": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectVersionView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AssignedUserGroupRequest": {
      "properties": {
        "group": {
          "type": "string",
          "description": "URL where a representation of the user group being assigned may be read from"
        }
      }
    },
    "PageView«VulnerabilityV2View»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VulnerabilityV2View"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LicenseView": {
      "required": [
        "licenseStatus"
      ],
      "properties": {
        "codeSharing": {
          "type": "string",
          "description": "The license family",
          "enum": [
            "PERMISSIVE",
            "RECIPROCAL",
            "WEAK_RECIPROCAL",
            "RECIPROCAL_AGPL",
            "UNKNOWN"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Username of the user who created the license"
        },
        "createdBy": {
          "type": "string",
          "description": "Timestamp when the license is created"
        },
        "createdByUser": {
          "type": "string",
          "description": "URL where more information on the creating user can be found"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp with the license will be expired"
        },
        "licenseSource": {
          "type": "string",
          "description": "The source of the license: Custom or Knowledge Base",
          "enum": [
            "CUSTOM",
            "KB",
            "MODIFIED_KB"
          ]
        },
        "licenseStatus": {
          "type": "string",
          "description": "The status of the license: Unreviewed, Approved, Rejected or Conditionally Approved",
          "enum": [
            "UNREVIEWED",
            "APPROVED",
            "REJECTED",
            "CONDITIONALLY_APPROVED"
          ]
        },
        "name": {
          "type": "string",
          "description": "Label distinguishing the license from other licenses"
        },
        "notes": {
          "type": "string",
          "description": "The license's notes"
        },
        "ownership": {
          "type": "string",
          "description": "The ownership status of the license",
          "enum": [
            "OPEN_SOURCE",
            "PROPRIETARY",
            "UNKNOWN"
          ]
        },
        "spdxId": {
          "type": "string",
          "description": "The SPDX Id of the license"
        },
        "statusUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the license status is last updated"
        },
        "statusUpdatedBy": {
          "type": "string",
          "description": "Username of the last user to update the license status"
        },
        "statusUpdatedByUser": {
          "type": "string",
          "description": "URL where more information on the last user to update the license status"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the license is last updated"
        },
        "updatedBy": {
          "type": "string",
          "description": "Username of the last user to update the license"
        },
        "updatedByUser": {
          "type": "string",
          "description": "URL where more information on the last user to update the license can be found"
        }
      },
      "description": "Representation of a license"
    },
    "UserGroupView": {
      "required": [
        "createdFrom",
        "name"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the user group is active and usable within the system"
        },
        "createdFrom": {
          "type": "string",
          "description": "The system that provided the group",
          "enum": [
            "INTERNAL",
            "LDAP",
            "SITEMINDER",
            "X509"
          ]
        },
        "externalName": {
          "type": "string",
          "description": "Name used to identify the group within another system"
        },
        "name": {
          "type": "string",
          "description": "The identifying label of the user group"
        },
        "userGroup": {
          "type": "string",
          "description": "URL where a representation of the user group may be read from"
        }
      }
    },
    "ActivityDataView": {
      "properties": {
        "commitCount12Month": {
          "type": "integer",
          "format": "int64",
          "description": "The number of commits in a 12 month period"
        },
        "contributorCount12Month": {
          "type": "integer",
          "format": "int64",
          "description": "The number of contributors in a 12 month period"
        },
        "lastCommitDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last time a commit was made to the project"
        },
        "trending": {
          "type": "string",
          "description": "The overall characteristics of development activity",
          "enum": [
            "DECREASING",
            "STABLE",
            "INCREASING"
          ]
        }
      }
    },
    "ExternalExtensionConfigValueView": {
      "required": [
        "name",
        "optionType",
        "options",
        "required",
        "singleValue",
        "title",
        "value"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "A user-consumable summary of what the option represents"
        },
        "name": {
          "type": "string",
          "description": "A machine-consumable identifier identifying the option despite any changes in title/description"
        },
        "optionType": {
          "type": "string",
          "description": "The type of option being presented",
          "enum": [
            "BOOLEAN",
            "STRING",
            "INTEGER",
            "ARRAY"
          ]
        },
        "options": {
          "type": "array",
          "description": "The set of possible options a user may choose from for the setting",
          "items": {
            "$ref": "#/definitions/ConfigOptionView"
          }
        },
        "required": {
          "type": "boolean",
          "description": "true if the option must be set when saving modification, false otherwise"
        },
        "singleValue": {
          "type": "boolean",
          "description": "True if the user must provide or select only a single value from all possible choices, false if multiple values may be selected"
        },
        "title": {
          "type": "string",
          "description": "A user-consumable label distinguishing the option among all options presented"
        },
        "value": {
          "type": "array",
          "description": "The current value(s) selected for the option",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ComponentVersionReferenceView": {
      "required": [
        "projectName",
        "projectVersionUrl",
        "versionName"
      ],
      "properties": {
        "projectName": {
          "type": "string"
        },
        "projectVersionUrl": {
          "type": "string"
        },
        "versionName": {
          "type": "string"
        }
      }
    },
    "ProjectView": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Summary of what the project represents in terms of functionality and use"
        },
        "name": {
          "type": "string",
          "description": "The general identifier of the project"
        },
        "projectLevelAdjustments": {
          "type": "boolean",
          "description": "Whether BOM level adjustments are applied at the project level (to all releases)"
        },
        "projectOwner": {
          "description": "The Project owner url",
          "$ref": "#/definitions/Optional«string»"
        },
        "projectTier": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed values : [1,2,3,4,5]"
        },
        "source": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "KB"
          ]
        }
      }
    },
    "PageView«BomComponentIssueView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BomComponentIssueView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AssignableUserGroupView": {
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the represented user group is active"
        },
        "name": {
          "type": "string",
          "description": "The assignable user group's name"
        },
        "usergroup": {
          "type": "string",
          "description": "URL where a representation of the user group may be read from"
        }
      }
    },
    "ComponentVersionRiskView": {
      "properties": {
        "activityData": {
          "description": "Description of development activity on the component",
          "$ref": "#/definitions/ActivityDataView"
        },
        "riskData": {
          "description": "Description of vulnerability data on the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "versionData": {
          "description": "Description of version activity on the component",
          "$ref": "#/definitions/VersionDataView"
        }
      }
    },
    "ComponentSearchResultView": {
      "properties": {
        "component": {
          "type": "string",
          "description": "URL to the full representation of the component"
        },
        "componentName": {
          "type": "string",
          "description": "Label summarizing the identity of the component found"
        },
        "originId": {
          "type": "string",
          "description": "ID indicating where the component came from"
        },
        "variant": {
          "type": "string",
          "description": "URL to the full representation of the variant"
        },
        "version": {
          "type": "string",
          "description": "URL to the full representation of the version"
        },
        "versionName": {
          "type": "string",
          "description": "Label specifying the specific version of the component found"
        }
      }
    },
    "RoleAssignmentView": {
      "required": [
        "description",
        "name",
        "role",
        "scope"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "RiskPriorityDistribution": {
      "properties": {
        "HIGH": {
          "type": "integer",
          "format": "int32"
        },
        "LOW": {
          "type": "integer",
          "format": "int32"
        },
        "MEDIUM": {
          "type": "integer",
          "format": "int32"
        },
        "OK": {
          "type": "integer",
          "format": "int32"
        },
        "UNKNOWN": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RiskCountView": {
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The level of risk within the severity threshold"
        },
        "countType": {
          "type": "string",
          "description": "The level of severity being quantified",
          "enum": [
            "UNKNOWN",
            "OK",
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        }
      }
    },
    "UserAssignmentRequest": {
      "required": [
        "user"
      ],
      "properties": {
        "user": {
          "type": "string"
        }
      }
    },
    "UserInternalView": {
      "required": [
        "active",
        "email",
        "externalUserName",
        "firstName",
        "lastName",
        "type",
        "userName"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "The active status of the user."
        },
        "email": {
          "type": "string",
          "description": "The email of the user. Can't be modified for an external users from Hub"
        },
        "externalUserName": {
          "type": "string",
          "description": "The external name of the user. This will have a value if the type is EXTERNAL. Can't be modified for an external users from Hub"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user. Can't be modified for an external users from Hub"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user. Can't be modified for an external users from Hub"
        },
        "roles": {
          "type": "array",
          "description": "The overall roles assigned to this user (and any user groups that this user belongs to)",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "type": {
          "type": "string",
          "description": "The type of the user. Whether INTERNAL or EXTERNAL"
        },
        "user": {
          "type": "string",
          "description": "URL where a representation of the user may be read from"
        },
        "userName": {
          "type": "string",
          "description": "The name of the user"
        }
      }
    },
    "ComplexLicenseRequest": {
      "properties": {
        "license": {
          "type": "string",
          "description": "The license URL. Applies to simple licenses only; for complex licenses, the license URLs will be specified within the 'licenses' property elements"
        },
        "licenses": {
          "type": "array",
          "description": "The licenses that comprise this complex license. For simple licenses this field should be omitted",
          "items": {
            "$ref": "#/definitions/ComplexLicenseRequest"
          }
        },
        "type": {
          "type": "string",
          "description": "The complex license type. Supported values are: CONJUNCTIVE, DISJUNCTIVE. For simple licenses this field should be omitted",
          "enum": [
            "CONJUNCTIVE",
            "DISJUNCTIVE"
          ]
        }
      }
    },
    "AssignedProjectView": {
      "properties": {
        "assignment": {
          "type": "string",
          "description": "URL where a representation of the assignment may be read from, or where the assignment may be deleted"
        },
        "name": {
          "type": "string",
          "description": "The assigned project's name"
        },
        "project": {
          "type": "string",
          "description": "URL where a representation of the assigned project may be read from"
        }
      }
    },
    "VersionBasedReportRequest": {
      "required": [
        "reportFormat",
        "reportType",
        "reportUrl",
        "versionId"
      ],
      "properties": {
        "reportFormat": {
          "type": "string",
          "enum": [
            "CSV",
            "JSON",
            "TEXT"
          ]
        },
        "reportType": {
          "type": "string",
          "enum": [
            "VERSION_LICENSE",
            "VERSION",
            "VULNERABILITY_REMEDIATION",
            "VULNERABILITY_STATUS",
            "VULNERABILITY_UPDATE"
          ]
        },
        "reportUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "versionId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ComponentView": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "KB"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "PROJECT",
            "COMPONENT"
          ]
        },
        "url": {
          "type": "string"
        }
      }
    },
    "PageView«TagView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ComplexLicenseView": {
      "properties": {
        "codeSharing": {
          "type": "string",
          "enum": [
            "PERMISSIVE",
            "RECIPROCAL",
            "WEAK_RECIPROCAL",
            "RECIPROCAL_AGPL",
            "UNKNOWN"
          ]
        },
        "license": {
          "$ref": "#/definitions/Optional«string»"
        },
        "licenseDisplay": {
          "type": "string"
        },
        "licenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplexLicenseView"
          }
        },
        "name": {
          "type": "string"
        },
        "ownership": {
          "type": "string",
          "enum": [
            "OPEN_SOURCE",
            "PROPRIETARY",
            "UNKNOWN"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "CONJUNCTIVE",
            "DISJUNCTIVE"
          ]
        }
      }
    },
    "ComponentVersionView": {
      "required": [
        "versionName"
      ],
      "properties": {
        "license": {
          "$ref": "#/definitions/ComplexLicenseView"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "CUSTOM",
            "KB"
          ]
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "PROJECT",
            "COMPONENT"
          ]
        },
        "versionName": {
          "type": "string"
        }
      }
    },
    "PageView«AssignedInheritedProjectView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedInheritedProjectView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«ComponentSearchResult»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentSearchResult"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AssignedUserView": {
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the represented user is active"
        },
        "email": {
          "type": "string",
          "description": "The assigned user's email"
        },
        "firstName": {
          "type": "string",
          "description": "The assigned user's first name"
        },
        "lastName": {
          "type": "string",
          "description": "The assigned user's last name"
        },
        "name": {
          "type": "string",
          "description": "The assigned user's name"
        },
        "user": {
          "type": "string",
          "description": "URL where a representation of the user assigned may be read from"
        }
      }
    },
    "Map«string,RiskPriorityDistribution»": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/RiskPriorityDistribution"
      }
    },
    "ComponentHit": {
      "properties": {
        "component": {
          "type": "string"
        },
        "fields": {
          "type": "object"
        }
      }
    },
    "ComponentVersionPolicyViolationDetails": {
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "severityLevels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePairView"
          }
        }
      }
    },
    "PageView«VersionBomComponentView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionBomComponentView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UrlDirectoryView": {
      "required": [
        "bomImport",
        "codeLocations",
        "components",
        "projects",
        "roles",
        "userGroups",
        "userStatusFilters",
        "users",
        "vulnerabilityRemidiationReports",
        "vulnerabilityStatusReports",
        "vulnerabilityUpdateReports"
      ],
      "properties": {
        "bomImport": {
          "type": "string",
          "description": "Location for uploading BOM import files"
        },
        "codeLocations": {
          "type": "string",
          "description": "Location for representations of code locations"
        },
        "components": {
          "type": "string",
          "description": "Location for representations of components"
        },
        "notificationStateFilters": {
          "type": "string",
          "description": "Location for representations of notification state filters"
        },
        "notificationTypeFilters": {
          "type": "string",
          "description": "Location for representations of notification type filters"
        },
        "notifications": {
          "type": "string",
          "description": "Location for representations of notifications"
        },
        "policyRules": {
          "type": "string",
          "description": "Location for representations of policy rules"
        },
        "projects": {
          "type": "string",
          "description": "Location for representations of projects"
        },
        "roles": {
          "type": "string",
          "description": "Location for representations of roles"
        },
        "userGroups": {
          "type": "string",
          "description": "Location for representations of user groups"
        },
        "userStatusFilters": {
          "type": "string",
          "description": "Location for representations of user status filters"
        },
        "users": {
          "type": "string",
          "description": "Location for representations of users"
        },
        "vulnerabilityRemidiationReports": {
          "type": "string",
          "description": "Location for representations of vulnerability remidiation reports"
        },
        "vulnerabilityStatusReports": {
          "type": "string",
          "description": "Location for representations of vulnerability status reports"
        },
        "vulnerabilityUpdateReports": {
          "type": "string",
          "description": "Location for representations of vulnerability update reports"
        }
      }
    },
    "PageView«NotificationUserView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationUserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DashboardSummaryView": {
      "required": [
        "catalogRiskProfile",
        "dashboardFacts",
        "dashboardOverall",
        "dashboardPolicyViolationByTier",
        "dashboardTopPolicyViolation",
        "dashboardTopSecurityRisk",
        "riskProfile"
      ],
      "properties": {
        "catalogRiskProfile": {
          "type": "string",
          "description": "Location for catalog risk profile"
        },
        "dashboardFacts": {
          "type": "string",
          "description": "Location for dashboard facts"
        },
        "dashboardOverall": {
          "type": "string",
          "description": "Location for dashboard overall"
        },
        "dashboardPolicyViolationByTier": {
          "type": "string",
          "description": "Location for dashboard policy violation by tier"
        },
        "dashboardTopPolicyViolation": {
          "type": "string",
          "description": "Location for dashboard top policy violation"
        },
        "dashboardTopSecurityRisk": {
          "type": "string",
          "description": "Location for dash board top security risk"
        },
        "riskProfile": {
          "type": "string",
          "description": "Location for risk profile"
        }
      }
    },
    "PageView«LicenseView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CustomComponentVersionRequest": {
      "required": [
        "versionName"
      ],
      "properties": {
        "license": {
          "description": "The license of the release",
          "$ref": "#/definitions/ComplexLicenseRequest"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date the Release became available for usage"
        },
        "versionName": {
          "type": "string",
          "description": "The general identifier of the release version"
        }
      }
    },
    "ProjectRoleAssignmentRequest": {
      "required": [
        "role",
        "user",
        "usergroup"
      ],
      "properties": {
        "role": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "usergroup": {
          "type": "string"
        }
      }
    },
    "PageView«OriginDependencyView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OriginDependencyView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DiffPageView": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionBomComponentDiffView"
          }
        },
        "totalAddedComponentVersions": {
          "type": "integer",
          "format": "int32"
        },
        "totalAddedComponents": {
          "type": "integer",
          "format": "int32"
        },
        "totalChangedComponentVersions": {
          "type": "integer",
          "format": "int32"
        },
        "totalChangedComponents": {
          "type": "integer",
          "format": "int32"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "totalRemovedComponentVersions": {
          "type": "integer",
          "format": "int32"
        },
        "totalRemovedComponents": {
          "type": "integer",
          "format": "int32"
        },
        "totalUnchangedComponentVersions": {
          "type": "integer",
          "format": "int32"
        },
        "totalUnchangedComponents": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NotificationView": {
      "properties": {
        "content": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "POLICY_OVERRIDE",
            "RULE_VIOLATION",
            "VULNERABILITY",
            "LICENSE_LIMIT",
            "RULE_VIOLATION_CLEARED"
          ]
        }
      }
    },
    "Optional«List«AssignedUserGroup»»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "FilterValueView": {
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterValueView"
          }
        }
      }
    },
    "FacetType": {
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "singleSelect": {
          "type": "boolean"
        },
        "translateValues": {
          "type": "boolean"
        }
      }
    },
    "UserGroupRequest": {
      "required": [
        "active",
        "name",
        "userName"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the user group is active and usable within the system"
        },
        "name": {
          "type": "string",
          "description": "The identifying label of the user group"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "AssignedUserGroupView": {
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the represented user group is active"
        },
        "group": {
          "type": "string",
          "description": "URL where a representation of the user group assigned may be read from"
        },
        "name": {
          "type": "string",
          "description": "The assigned user group's name"
        }
      }
    },
    "Optional«Set«PolicyStatusSummary»»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "IssueView": {
      "required": [
        "issueAssignee",
        "issueCreatedAt",
        "issueId",
        "issueLink",
        "issueStatus",
        "issueUpdatedAt"
      ],
      "properties": {
        "issueAssignee": {
          "type": "string",
          "description": "Issue assignee in issue tracker"
        },
        "issueCreatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Issue creation date in issue tracker"
        },
        "issueDescription": {
          "type": "string",
          "description": "Issue description in issue tracker"
        },
        "issueId": {
          "type": "string",
          "description": "Issue id in issue tracker"
        },
        "issueLink": {
          "type": "string",
          "description": "Issue link in issue tracker"
        },
        "issueStatus": {
          "type": "string",
          "description": "Issue status in issue tracker"
        },
        "issueUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Issue update date in issue tracker"
        }
      }
    },
    "PageView«UserGroupView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Page«NotificationSubscriptionView»": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationSubscriptionView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OriginView": {
      "required": [
        "versionName"
      ],
      "properties": {
        "license": {
          "description": "Licensing information specific to the origin",
          "$ref": "#/definitions/Optional«ComplexLicenseView»"
        },
        "originId": {
          "type": "string",
          "description": "External ID describing the origin"
        },
        "originName": {
          "type": "string",
          "description": "Label summarizing the origin system"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time",
          "description": "Date the origin was released"
        },
        "source": {
          "type": "string",
          "description": "The data source the origin is stored in",
          "readOnly": true,
          "enum": [
            "CUSTOM",
            "KB"
          ]
        },
        "versionName": {
          "type": "string",
          "description": "Label for the version the origin is associated with"
        }
      }
    },
    "PageView«UserGroupWithRolesView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupWithRolesView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "HealthCheckStatusView": {
      "properties": {
        "healthy": {
          "type": "boolean"
        }
      }
    },
    "PageView«OriginView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OriginView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«AssignableUserGroupView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignableUserGroupView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AppliedFilterView": {
      "properties": {
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "selected": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterValueView"
          }
        }
      }
    },
    "ProjectVersionView": {
      "required": [
        "distribution",
        "phase",
        "versionName"
      ],
      "properties": {
        "distribution": {
          "type": "string",
          "enum": [
            "EXTERNAL",
            "SAAS",
            "INTERNAL",
            "OPENSOURCE"
          ]
        },
        "license": {
          "$ref": "#/definitions/Optional«ComplexLicenseView»"
        },
        "nickname": {
          "type": "string"
        },
        "phase": {
          "type": "string",
          "enum": [
            "PLANNING",
            "DEVELOPMENT",
            "RELEASED",
            "DEPRECATED",
            "ARCHIVED"
          ]
        },
        "releaseComments": {
          "type": "string"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string",
          "description": "Read-Only; No matter the value it will always default to 'CUSTOM'",
          "readOnly": true,
          "enum": [
            "CUSTOM",
            "KB"
          ]
        },
        "versionName": {
          "type": "string",
          "description": "Release Name to be created"
        }
      }
    },
    "PolicyRuleExpressionValue": {
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "LicenseTextView": {
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The license's text"
        }
      },
      "description": "Representation of a license's text"
    },
    "VulnerabilityUpdateReportRestRequest": {
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "optional if startDate is present"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "optional if endDate is present"
        }
      }
    },
    "UUID": {
      "properties": {
        "leastSignificantBits": {
          "type": "integer",
          "format": "int64"
        },
        "mostSignificantBits": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CweView": {
      "properties": {
        "commonConsequences": {
          "type": "array",
          "description": "The common consequences for the given weakness.",
          "items": {
            "$ref": "#/definitions/CweCommonConsequenceView"
          }
        },
        "description": {
          "description": "Short description.",
          "$ref": "#/definitions/Optional«string»"
        },
        "extendedDescription": {
          "description": "Extended description.",
          "$ref": "#/definitions/Optional«string»"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the common weakness enumeration"
        },
        "name": {
          "type": "string",
          "description": "Identifying name of the common weakness enumeration"
        }
      },
      "description": "Representation of a common weakness enumeration (CWE)."
    },
    "PageView«ProjectRiskProfile»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectRiskProfile"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UserRequest": {
      "required": [
        "active",
        "email",
        "firstName",
        "lastName",
        "password",
        "userName"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Active"
        },
        "email": {
          "type": "string",
          "description": "Email"
        },
        "firstName": {
          "type": "string",
          "description": "First Name"
        },
        "lastName": {
          "type": "string",
          "description": "Last Name"
        },
        "password": {
          "type": "string",
          "description": "Password"
        },
        "userName": {
          "type": "string",
          "description": "User Name"
        }
      }
    },
    "Facet": {
      "properties": {
        "facetType": {
          "$ref": "#/definitions/FacetType"
        },
        "facetValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetValue"
          }
        }
      }
    },
    "VersionDataView": {
      "properties": {
        "newerReleasesCount": {
          "type": "integer",
          "format": "int32",
          "description": "The total count of new releases"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The logical date the Release became available for usage."
        }
      }
    },
    "PageView«HierarchicalVersionBomComponentView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HierarchicalVersionBomComponentView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VulnerabilityV2Cvss3View": {
      "properties": {
        "attackComplexity": {
          "type": "string",
          "description": "The conditions beyond an attacker's control that must exist in order to exploit the vulnerability.",
          "enum": [
            "LOW",
            "HIGH"
          ]
        },
        "attackVector": {
          "type": "string",
          "description": "The attack vector for this vulnerability.",
          "enum": [
            "NETWORK",
            "ADJACENT",
            "LOCAL",
            "PHYSICAL"
          ]
        },
        "availabilityImpact": {
          "type": "string",
          "description": "Impact on the availability of the system if the vulnerability is exploited",
          "enum": [
            "HIGH",
            "LOW",
            "NONE"
          ]
        },
        "baseScore": {
          "type": "number",
          "format": "double",
          "description": "Score summarizing the overall risk presented by the vulnerability"
        },
        "confidentialityImpact": {
          "type": "string",
          "description": "Impact on the confidentiality of data on the system if the vulnerability is exploited",
          "enum": [
            "HIGH",
            "LOW",
            "NONE"
          ]
        },
        "exploitabilitySubscore": {
          "type": "number",
          "format": "double",
          "description": "Sub-score detailing the risk presented by current exploit techniques or exploit availability"
        },
        "impactSubscore": {
          "type": "number",
          "format": "double",
          "description": "Sub-score detailing the data exposure that occurs if the vulnerability is successfully exploited"
        },
        "integrityImpact": {
          "type": "string",
          "description": "Impact on the integrity of data on the system if the vulnerability is exploited",
          "enum": [
            "HIGH",
            "LOW",
            "NONE"
          ]
        },
        "privilegesRequired": {
          "type": "string",
          "description": "The level of privileges an attacker must possess before successfully exploiting the vulnerability.",
          "enum": [
            "NONE",
            "LOW",
            "HIGH"
          ]
        },
        "scope": {
          "type": "string",
          "description": "The collection of privileges defined by a computing authority when granting access to computing resources.",
          "enum": [
            "UNCHANGED",
            "CHANGED"
          ]
        },
        "temporalMetrics": {
          "description": "CVSS V3 temporal metrics.",
          "$ref": "#/definitions/Optional«Cvss3TemporalMetricsView»"
        },
        "userInteraction": {
          "type": "string",
          "description": "The requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.",
          "enum": [
            "NONE",
            "REQUIRED"
          ]
        },
        "vector": {
          "description": "CVSS V3 vector.",
          "$ref": "#/definitions/Optional«string»"
        }
      },
      "description": "V2 representation of a potential software security issue common vulnerability scoring system v3 data."
    },
    "CompositePathWithArchiveContext": {
      "properties": {
        "archiveContext": {
          "type": "string"
        },
        "compositePathContext": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PolicyStatusSummary": {
      "properties": {
        "comment": {
          "$ref": "#/definitions/Optional«string»"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "$ref": "#/definitions/Optional«string»"
        },
        "overriddenBy": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "type": "string",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "updatedBy": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "AssignedUserGroup": {
      "properties": {
        "assignment": {
          "type": "string",
          "description": "URL where a representation of the assignment may be read from, or where the assignment may be deleted"
        },
        "group": {
          "type": "string",
          "description": "URL where a representation of the user group may be read from"
        },
        "name": {
          "type": "string",
          "description": "The name of the user group"
        }
      }
    },
    "UserCommentView": {
      "required": [
        "comment"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "commentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "user": {
          "readOnly": true,
          "$ref": "#/definitions/CommentUserData"
        }
      }
    },
    "RoleView": {
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "VersionRiskProfileView": {
      "properties": {
        "bomLastUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "categories": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RiskPriorityDistribution"
          }
        }
      }
    },
    "Role": {
      "properties": {
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "VulnerabilityV1View": {
      "properties": {
        "accessComplexity": {
          "description": "How difficult it is to exploit the vulnerabilty",
          "$ref": "#/definitions/Optional«string»"
        },
        "accessVector": {
          "description": "How the vulnerability may be exploited",
          "$ref": "#/definitions/Optional«string»"
        },
        "authentication": {
          "description": "How many times authentication is required from the attacker to exploit the vulnerability",
          "$ref": "#/definitions/Optional«string»"
        },
        "availabilityImpact": {
          "description": "Impact on the availability of the system if the vulnerability is exploited",
          "$ref": "#/definitions/Optional«string»"
        },
        "baseScore": {
          "type": "number",
          "format": "double",
          "description": "Score summarizing the overall risk presented by the vulnerability"
        },
        "confidentialityImpact": {
          "description": "Impact on the confidentiality of data on the system if the vulnerability is exploited",
          "$ref": "#/definitions/Optional«string»"
        },
        "cweId": {
          "type": "string",
          "description": "ID of the Common Weaknesses and Exposures (CWE) category the vulnerability belongs to"
        },
        "description": {
          "type": "string",
          "description": "Short summary of the vulnerability's properties"
        },
        "exploitabilitySubscore": {
          "type": "number",
          "format": "double",
          "description": "Sub-score detailing the risk presented by current exploit techniques or exploit availability"
        },
        "impactSubscore": {
          "type": "number",
          "format": "double",
          "description": "Sub-score detailing the data exposure that occurs if the vulnerability is successfully exploited"
        },
        "integrityImpact": {
          "description": "Impact on the integrity of data on the system if the vulnerability is exploited",
          "$ref": "#/definitions/Optional«string»"
        },
        "severity": {
          "description": "The general level of risk severity presented by the vulnerability",
          "$ref": "#/definitions/Optional«string»"
        },
        "source": {
          "type": "string",
          "description": "The vulnerability database/reporting authority this vulnerability originates from",
          "enum": [
            "NVD",
            "VULNDB"
          ]
        },
        "vulnerabilityName": {
          "type": "string",
          "description": "Identifying name of the vulnerability"
        },
        "vulnerabilityPublishedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the vulnerability was created/published"
        },
        "vulnerabilityUpdatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the last modification to the vulnerability information"
        }
      },
      "description": "V1 representation of a potential software security issue"
    },
    "NotificationSubscriptionView": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "subscriptionTarget": {
          "type": "string"
        }
      }
    },
    "CommentUserData": {
      "properties": {
        "active": {
          "type": "boolean",
          "description": "The active status of the user."
        },
        "email": {
          "type": "string",
          "description": "The email of the user. Can't be modified for an external users from Hub"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user. Can't be modified for an external users from Hub"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user. Can't be modified for an external users from Hub"
        },
        "userName": {
          "type": "string",
          "description": "The name of the user"
        }
      }
    },
    "PageView«RoleView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«ComponentDetailsView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentDetailsView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VulnerabilityWithRemediationView": {
      "required": [
        "baseScore",
        "cweId",
        "description",
        "exploitabilitySubscore",
        "impactSubscore",
        "remediationActualAt",
        "remediationCreatedAt",
        "remediationStatus",
        "remediationTargetAt",
        "remediationUpdatedAt",
        "severity",
        "source",
        "vulnerabilityName",
        "vulnerabilityPublishedDate",
        "vulnerabilityUpdatedDate"
      ],
      "properties": {
        "baseScore": {
          "type": "number",
          "format": "double"
        },
        "cweId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "exploitabilitySubscore": {
          "type": "number",
          "format": "double"
        },
        "impactSubscore": {
          "type": "number",
          "format": "double"
        },
        "remediationActualAt": {
          "type": "string",
          "format": "date-time"
        },
        "remediationCreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "remediationStatus": {
          "type": "string",
          "enum": [
            "DUPLICATE",
            "IGNORED",
            "MITIGATED",
            "NEEDS_REVIEW",
            "NEW",
            "PATCHED",
            "REMEDIATION_COMPLETE",
            "REMEDIATION_REQUIRED"
          ]
        },
        "remediationTargetAt": {
          "type": "string",
          "format": "date-time"
        },
        "remediationUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "severity": {
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        },
        "source": {
          "type": "string",
          "enum": [
            "NVD",
            "VULNDB",
            "BDSA"
          ]
        },
        "vulnerabilityName": {
          "type": "string"
        },
        "vulnerabilityPublishedDate": {
          "type": "string",
          "format": "date-time"
        },
        "vulnerabilityUpdatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PageView«ExternalExtensionConfigValueView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalExtensionConfigValueView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«UserInternalView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInternalView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RiskProfile": {
      "properties": {
        "categories": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RiskPriorityDistribution"
          }
        }
      }
    },
    "ComponentVersionDetails": {
      "properties": {
        "license": {
          "$ref": "#/definitions/ComplexLicenseView"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "KB"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "PROJECT",
            "COMPONENT"
          ]
        },
        "versionName": {
          "type": "string"
        }
      }
    },
    "Page«UserCommentView»": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserCommentView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RemediationOptionsView": {
      "properties": {
        "fixesPreviousVulnerabilities": {
          "$ref": "#/definitions/Optional«RemediatingVersionView»"
        },
        "latestAfterCurrent": {
          "$ref": "#/definitions/Optional«RemediatingVersionView»"
        },
        "noVulnerabilities": {
          "$ref": "#/definitions/Optional«RemediatingVersionView»"
        }
      }
    },
    "EndUserLicenseAgreementAction": {
      "required": [
        "accept"
      ],
      "properties": {
        "accept": {
          "type": "boolean"
        },
        "acceptEndUserLicense": {
          "type": "boolean"
        }
      }
    },
    "CurrentVersionView": {
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "string",
          "description": "The current hub version"
        }
      }
    },
    "ResetPassword": {
      "required": [
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        }
      }
    },
    "Optional«long»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "AssignedInheritedProjectView": {
      "properties": {
        "assignedGroups": {
          "description": "User groups that the user belongs to that are assigned to the project",
          "$ref": "#/definitions/Optional«List«AssignedUserGroup»»"
        },
        "assignment": {
          "type": "string",
          "description": "URL where a representation of the assignment may be read from, or where the assignment may be deleted"
        },
        "name": {
          "type": "string",
          "description": "The assigned project's name"
        },
        "project": {
          "type": "string",
          "description": "URL where a representation of the assigned project may be read from"
        }
      }
    },
    "PolicyStatusView": {
      "properties": {
        "approvalStatus": {
          "type": "string",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "Optional«VulnerabilityV2Cvss2View»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "BomComponentIssueView": {
      "required": [
        "issueAssignee",
        "issueCreatedAt",
        "issueId",
        "issueLink",
        "issueStatus",
        "issueUpdatedAt"
      ],
      "properties": {
        "issueAssignee": {
          "type": "string",
          "description": "Issue assignee in issue tracker"
        },
        "issueCreatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Issue creation date in issue tracker"
        },
        "issueDescription": {
          "type": "string",
          "description": "Issue description in issue tracker"
        },
        "issueId": {
          "type": "string",
          "description": "Issue id in issue tracker"
        },
        "issueLink": {
          "type": "string",
          "description": "Issue link in issue tracker"
        },
        "issueStatus": {
          "type": "string",
          "description": "Issue status in issue tracker"
        },
        "issueUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Issue update date in issue tracker"
        },
        "projectName": {
          "type": "string"
        },
        "releaseVersion": {
          "$ref": "#/definitions/Optional«string»"
        }
      }
    },
    "ProjectDashboardRiskAmalgamation": {
      "properties": {
        "overallRiskAggregate": {
          "$ref": "#/definitions/RiskProfile"
        },
        "projectRiskProfilePageView": {
          "$ref": "#/definitions/PageView«ProjectRiskProfile»"
        }
      }
    },
    "UserView": {
      "required": [
        "active",
        "email",
        "externalUserName",
        "firstName",
        "lastName",
        "type",
        "userName"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "The active status of the user."
        },
        "email": {
          "type": "string",
          "description": "The email of the user. Can't be modified for an external users from Hub"
        },
        "externalUserName": {
          "type": "string",
          "description": "The external name of the user. This will have a value if the type is EXTERNAL. Can't be modified for an external users from Hub"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user. Can't be modified for an external users from Hub"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user. Can't be modified for an external users from Hub"
        },
        "type": {
          "type": "string",
          "description": "The type of the user. Whether INTERNAL or EXTERNAL"
        },
        "user": {
          "type": "string",
          "description": "URL where a representation of the user may be read from"
        },
        "userName": {
          "type": "string",
          "description": "The name of the user"
        }
      }
    },
    "Optional«Cvss2TemporalMetricsView»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "PolicyRuleView": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByUser": {
          "type": "string",
          "description": "URL where more information on the creating user can be found"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "expression": {
          "$ref": "#/definitions/PolicyRuleExpressionSet"
        },
        "name": {
          "type": "string"
        },
        "overridable": {
          "type": "boolean"
        },
        "severity": {
          "$ref": "#/definitions/Optional«string»"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedByUser": {
          "type": "string",
          "description": "URL where more information on the last user to update the policy can be found"
        }
      }
    },
    "vulnerability remediation report request": {
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "optional if startDate is present"
        },
        "remediationTypes": {
          "type": "array",
          "description": "defaults to empty if not present",
          "items": {
            "type": "string",
            "enum": [
              "DUPLICATE",
              "IGNORED",
              "MITIGATED",
              "NEEDS_REVIEW",
              "NEW",
              "PATCHED",
              "REMEDIATION_COMPLETE",
              "REMEDIATION_REQUIRED"
            ]
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "optional if endDate is present"
        }
      }
    },
    "NameValuePairView": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      }
    },
    "HierarchicalVersionBomComponentView": {
      "properties": {
        "aggregateLicenseRiskProfile": {
          "description": "Risk levels associated with license aspects of the component and components contained within.",
          "$ref": "#/definitions/RiskProfileView"
        },
        "aggregateOperationalRiskProfile": {
          "description": "Risk levels associated with operational aspects of the component and components contained within.",
          "$ref": "#/definitions/RiskProfileView"
        },
        "aggregatePolicyStatus": {
          "type": "string",
          "description": "Description of policy status of the component and components contained within.",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "aggregateSecurityRiskProfile": {
          "description": "Risk levels associated with security aspects of the component and components contained within.",
          "$ref": "#/definitions/RiskProfileView"
        },
        "component": {
          "type": "string",
          "description": "Reference to the URL representation of the component"
        },
        "componentName": {
          "type": "string",
          "description": "Label distinguishing the component from other components"
        },
        "componentVersion": {
          "type": "string",
          "description": "Reference to the URL representation of the component version"
        },
        "componentVersionName": {
          "type": "string",
          "description": "Label distinguishing the version from other versions of the component"
        },
        "licenseRiskProfile": {
          "description": "Risk levels associated with licensing aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "licenses": {
          "type": "array",
          "description": "Any license(s) associated with the component's use in the project",
          "items": {
            "$ref": "#/definitions/VersionBomLicenseView"
          }
        },
        "matchTypes": {
          "type": "array",
          "description": "The types of matches made to the component within the project",
          "items": {
            "type": "string",
            "enum": [
              "FILE_FILES_ADDED_DELETED_AND_MODIFIED",
              "FILE_DEPENDENCY",
              "FILE_EXACT",
              "FILE_EXACT_FILE_MATCH",
              "FILE_SOME_FILES_MODIFIED",
              "MANUAL_BOM_COMPONENT",
              "MANUAL_BOM_FILE",
              "PARTIAL_FILE",
              "SNIPPET"
            ]
          }
        },
        "numberOfMatches": {
          "type": "integer",
          "format": "int32",
          "description": "The number of file match count for each component version"
        },
        "operationalRiskProfile": {
          "description": "Risk levels associated with operational aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "origins": {
          "type": "array",
          "description": "The distribution origin(s) identified",
          "items": {
            "$ref": "#/definitions/VersionBomOriginView"
          }
        },
        "policyStatus": {
          "type": "string",
          "description": "Description of policy status of a components.",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "reviewStatus": {
          "type": "string",
          "description": "The review status of a component",
          "enum": [
            "NOT_REVIEWED",
            "REVIEWED"
          ]
        },
        "reviewedDetails": {
          "description": "Description of review details on the components",
          "$ref": "#/definitions/ReviewedDetails"
        },
        "securityRiskProfile": {
          "description": "Risk levels associated with security aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "usages": {
          "type": "array",
          "description": "The usage(s) of the component within the project",
          "items": {
            "type": "string",
            "enum": [
              "DYNAMICALLY_LINKED",
              "STATICALLY_LINKED",
              "SOURCE_CODE",
              "DEV_TOOL_EXCLUDED",
              "SEPARATE_WORK",
              "IMPLEMENTATION_OF_STANDARD"
            ]
          }
        }
      }
    },
    "PageView«PolicyRuleViewV2»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRuleViewV2"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FacetValue": {
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "filterValue": {
          "type": "string"
        },
        "selected": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "VersionBomLicenseView": {
      "required": [
        "license"
      ],
      "properties": {
        "license": {
          "type": "string",
          "description": "Reference to the full representation of the license"
        },
        "licenseDisplay": {
          "type": "string",
          "description": "Label distinguishing the license from other licenses"
        },
        "licenseType": {
          "type": "string",
          "description": "How this license is related to other licenses within a given context",
          "enum": [
            "CONJUNCTIVE",
            "DISJUNCTIVE"
          ]
        },
        "licenses": {
          "type": "array",
          "description": "Additional licenses related to this license via the provided type",
          "items": {
            "$ref": "#/definitions/VersionBomLicenseView"
          }
        }
      }
    },
    "Page«ComponentVersionView»": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentVersionView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Optional«Cvss3TemporalMetricsView»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "Optional«VulnerabilityV2Cvss3View»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "VersionBomComponentView": {
      "properties": {
        "activityData": {
          "description": "Description of development activity on the component",
          "$ref": "#/definitions/ActivityDataView"
        },
        "activityRiskProfile": {
          "description": "Risk levels associated with activity aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "approvalStatus": {
          "type": "string",
          "description": "Replaced by policyStatus",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "component": {
          "type": "string",
          "description": "Reference to the representation of the component"
        },
        "componentName": {
          "type": "string",
          "description": "Label distinguishing the component from other components"
        },
        "componentVersion": {
          "type": "string",
          "description": "Reference to the representation of the component version"
        },
        "componentVersionName": {
          "type": "string",
          "description": "Label distinguishing the version from other versions of the component"
        },
        "licenseRiskProfile": {
          "description": "Risk levels associated with licensing aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "licenses": {
          "type": "array",
          "description": "Any license(s) associated with the component's use in the project",
          "items": {
            "$ref": "#/definitions/VersionBomLicenseView"
          }
        },
        "matchTypes": {
          "type": "array",
          "description": "The types of matches made to the component within the project",
          "items": {
            "type": "string",
            "enum": [
              "FILE_FILES_ADDED_DELETED_AND_MODIFIED",
              "FILE_DEPENDENCY",
              "FILE_EXACT",
              "FILE_EXACT_FILE_MATCH",
              "FILE_SOME_FILES_MODIFIED",
              "MANUAL_BOM_COMPONENT",
              "MANUAL_BOM_FILE",
              "PARTIAL_FILE",
              "SNIPPET"
            ]
          }
        },
        "operationalRiskProfile": {
          "description": "Risk levels associated with operational aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "origins": {
          "type": "array",
          "description": "The distribution origin(s) identified",
          "items": {
            "$ref": "#/definitions/VersionBomOriginView"
          }
        },
        "policyStatus": {
          "type": "string",
          "description": "Description of policy status of a components.",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date the component was made available for use"
        },
        "reviewStatus": {
          "type": "string",
          "description": "The review status of a component",
          "enum": [
            "NOT_REVIEWED",
            "REVIEWED"
          ]
        },
        "reviewedDetails": {
          "description": "Description of review details on the components",
          "$ref": "#/definitions/ReviewedDetails"
        },
        "securityRiskProfile": {
          "description": "Risk levels associated with security aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "totalFileMatchCount": {
          "type": "integer",
          "format": "int64",
          "description": "The total file match count for each component version"
        },
        "usages": {
          "type": "array",
          "description": "The usage(s) of the component within the project",
          "items": {
            "type": "string",
            "enum": [
              "DYNAMICALLY_LINKED",
              "STATICALLY_LINKED",
              "SOURCE_CODE",
              "DEV_TOOL_EXCLUDED",
              "SEPARATE_WORK",
              "IMPLEMENTATION_OF_STANDARD"
            ]
          }
        },
        "versionRiskProfile": {
          "description": "Risk levels associated with versioning aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        }
      }
    },
    "RemediatingVersionView": {
      "properties": {
        "componentVersion": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "releasedOn": {
          "$ref": "#/definitions/Optional«DateTime»"
        },
        "vulnerabilityCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TagView": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of a project tag"
        }
      }
    },
    "MatchedFileView": {
      "required": [
        "filePath",
        "usages"
      ],
      "properties": {
        "filePath": {
          "$ref": "#/definitions/CompositePathWithArchiveContext"
        },
        "usages": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DYNAMICALLY_LINKED",
              "STATICALLY_LINKED",
              "SOURCE_CODE",
              "DEV_TOOL_EXCLUDED",
              "SEPARATE_WORK",
              "IMPLEMENTATION_OF_STANDARD"
            ]
          }
        }
      }
    },
    "ConfigOptionView": {
      "properties": {
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "PageView«AssignedUserView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedUserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportContent": {
      "properties": {
        "reportContent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFileContent"
          }
        }
      }
    },
    "UserComment": {
      "required": [
        "comment"
      ],
      "properties": {
        "comment": {
          "type": "string"
        }
      }
    },
    "ReportView": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the report was created"
        },
        "createdBy": {
          "type": "string",
          "description": "The user that originally created this report"
        },
        "createdByUser": {
          "type": "string",
          "description": "URL linking to more information about the user who created this report"
        },
        "fileName": {
          "type": "string",
          "description": "The file name for the given report"
        },
        "fileNamePrefix": {
          "type": "string",
          "description": "The file name prefix for the given report"
        },
        "fileSize": {
          "type": "integer",
          "format": "int64",
          "description": "The file size for the given report"
        },
        "finishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the report was finished"
        },
        "locale": {
          "type": "string",
          "description": "The locale used in generating the report's contents"
        },
        "reportFormat": {
          "type": "string",
          "description": "The file format for the given report",
          "enum": [
            "CSV",
            "JSON",
            "TEXT"
          ]
        },
        "reportType": {
          "type": "string",
          "description": "The file type for the given report",
          "enum": [
            "VERSION_LICENSE",
            "VERSION",
            "VULNERABILITY_REMEDIATION",
            "VULNERABILITY_STATUS",
            "VULNERABILITY_UPDATE"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the report was last updated"
        }
      }
    },
    "Page«ProjectView»": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SearchResultStatistics": {
      "properties": {
        "numResultsFound": {
          "type": "integer",
          "format": "int64"
        },
        "numResultsInThisPage": {
          "type": "integer",
          "format": "int32"
        },
        "timeTakenMs": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "View": {
      "properties": {
        "contentType": {
          "type": "string"
        }
      }
    },
    "ProjectVersionRequest": {
      "required": [
        "distribution",
        "phase",
        "versionName"
      ],
      "properties": {
        "distribution": {
          "type": "string",
          "description": "The distribution channel of the release",
          "enum": [
            "EXTERNAL",
            "SAAS",
            "INTERNAL",
            "OPENSOURCE"
          ]
        },
        "nickname": {
          "type": "string",
          "description": "An alternative commonly used name or alias for the release"
        },
        "phase": {
          "type": "string",
          "description": "The phase in the development life-cycle of the release",
          "enum": [
            "PLANNING",
            "DEVELOPMENT",
            "RELEASED",
            "DEPRECATED",
            "ARCHIVED"
          ]
        },
        "releaseComments": {
          "type": "string",
          "description": "Pertinent comments or notes associated with the release"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The logical date the Release became available for usage"
        },
        "versionName": {
          "type": "string",
          "description": "The general identifier of the release version"
        }
      }
    },
    "Optional«ComplexLicenseView»": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "ComponentSearchResult": {
      "properties": {
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Facet"
          }
        },
        "hits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentHit"
          }
        },
        "localError": {
          "type": "string"
        },
        "remoteError": {
          "type": "string"
        },
        "searchResultSpec": {
          "$ref": "#/definitions/SearchResultSpec"
        },
        "searchResultStatistics": {
          "$ref": "#/definitions/SearchResultStatistics"
        }
      }
    },
    "PageView«AssignedProjectView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedProjectView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SearchResultSpec": {
      "properties": {
        "numResultsInPage": {
          "type": "integer",
          "format": "int32"
        },
        "rowStart": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ExternalExtensionView": {
      "required": [
        "authenticated",
        "infoUrl",
        "name"
      ],
      "properties": {
        "authenticated": {
          "type": "boolean",
          "description": "Whether the extension is currently successfully authenticated or not"
        },
        "description": {
          "type": "string",
          "description": "Short summary of the extension describing its functionality"
        },
        "infoUrl": {
          "type": "string",
          "description": "URL provided by an extension which specifies the extension's properties"
        },
        "name": {
          "type": "string",
          "description": "Label summarizing the extension"
        }
      }
    },
    "PageView«VulnerabilityV1View»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VulnerabilityV1View"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView«CryptoAlgorithmView»": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CryptoAlgorithmView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VersionReportRequest": {
      "required": [
        "reportFormat",
        "reportUrl",
        "versionId"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "description": "['VERSION', 'SECURITY', 'COMPONENTS', 'FILES', 'CODE_LOCATIONS', 'ATTACHMENTS', 'CRYPTO_ALGORITHMS']",
          "items": {
            "type": "string",
            "enum": [
              "VERSION",
              "CODE_LOCATIONS",
              "COMPONENTS",
              "SECURITY",
              "FILES",
              "ATTACHMENTS",
              "CRYPTO_ALGORITHMS"
            ]
          }
        },
        "reportFormat": {
          "type": "string",
          "enum": [
            "CSV",
            "JSON",
            "TEXT"
          ]
        },
        "reportType": {
          "type": "string",
          "enum": [
            "VERSION_LICENSE",
            "VERSION",
            "VULNERABILITY_REMEDIATION",
            "VULNERABILITY_STATUS",
            "VULNERABILITY_UPDATE"
          ]
        },
        "reportUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "versionId": {
          "type": "string",
          "format": "uuid"
        }
      }
    }
  }
}
